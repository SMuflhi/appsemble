name: Team barometer app
description: Enquête met resultaten beeld voor team barometer
defaultPage: Teambarometer
notifications: opt-in
theme:
  primaryColor: '#D73D31'
  themeColor: '#D73D31'
  linkColor: '#333333'
anchors:
  - &blocks-version '0.20.34'
  - &reminder-fields
    fields:
      - label: Titel notificatie
        type: string
        name: title
        requirements:
          - required: true
      - type: date
        label: Start
        name: date
        requirements:
          - required: true
          - from: { date.now }
      - label: Bericht
        name: content
        type: string
        multiline: true
        placeholder: hier de tekst die in de notificatie staat
        requirements:
          - required: true
  - &status-checker
    if:
      condition:
        - prop: startDate
      then:
        - if:
            condition:
              {
                gt:
                  [
                    [{ date.now }],
                    [{ prop: endDate }, { date.parse: yyyy-MM-dd }, { date.add: 86399000ms }],
                  ],
              }
            then:
              - static: Closed
            else:
              string.format:
                template: ⠀''{startDate}'' - ''{endDate}''
                values:
                  startDate: { prop: startDate }
                  endDate: { prop: endDate }
      else:
        - static: Concept
  - &clear-temp-formdata
    type: storage.delete
    key: tempQuestions
    storage: localStorage
    onSuccess:
      type: storage.delete
      key: tempSurveyUsers
      storage: localStorage

security:
  default:
    role: User
    policy: everyone
  roles:
    User:
      description: User who can answer a survey
roles:
  - User
layout:
  navigation: bottom
resources:
  user:
    roles:
      - $public
    schema:
      type: object
      additionalProperties: false
      required:
        - userName
        - externalId
        - name
        - emails
      properties:
        userName:
          type: string
        externalId:
          type: string
        name:
          type: object
          additionalProperties: false
          properties:
            familyName:
              type: string
            givenName:
              type: string
        emails:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              primary:
                type: boolean
              type:
                type: string
              value:
                type: string
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          type: object
          additionalProperties: false
          properties:
            Manager:
              type: string
  survey:
    schema:
      type: object
      additionalProperties: false
      required:
        - title
        - message
      properties:
        managerId:
          type: string
        title:
          type: string
        message:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        status:
          type: string
        team:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              id:
                type: string
              primaryEmail:
                type: string
        questions:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              question:
                type: string
              answerType:
                title: answerType
                enum:
                  - open
                  - meerkeuze
    roles: [$public]

  reminder:
    roles: [$public]
    schema:
      additionalProperties: false
      type: object
      required:
        - title
        - content
        - surveyId
        - date
      properties:
        title:
          type: string
        content:
          type: string
        surveyId:
          type: integer
        date:
          type: string

  answers:
    roles:
      - $public
    schema:
      type: object
      additionalProperties: false
      properties:
        surveyId:
          type: number
        answers:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              question:
                type: string
              answer:
                enum:
                  - happy
                  - neutral
                  - sad
              comment:
                type: string
    create:
      roles:
        - User
pages:
  - name: Gebruiker selecteren
    # This page serves as a mock SCIM-endpoint for testing purposes.
    # To effectively make use of the app, create at least two users:
    #   Both users should have the required fields filled in.
    #   One of these users is the manager. To make this person a manager, set the 'Manager' field of another user as this person's 'externalId'.
    # This page should be removed when the app is put into production.
    icon: user
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: resource.query
            resource: user
            remapAfter:
              array.map:
                - object.assign:
                    primaryEmail:
                      - prop: emails
                      - array.map:
                          if:
                            condition: { equals: [{ prop: primary }, true] }
                            then:
                              prop: value
                            else: false
                      - prop: 0
                - object.assign:
                    managerId:
                      - prop: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
                      - prop: Manager
        events:
          emit:
            data: users
      - type: table
        version: *blocks-version
        parameters:
          fields:
            - label: Name
              value: { prop: userName }
              onClick: userLogin
            - label: Email
              value: { prop: primaryEmail }
            - label: Manager ID
              value: { prop: managerId }
        actions:
          userLogin:
            type: log
            onSuccess:
              type: resource.query
              resource: user
              remapAfter:
                - array.map:
                    if:
                      condition:
                        {
                          equals:
                            [
                              [{ history: 0 }, { prop: externalId }],
                              [
                                {
                                  prop: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User,
                                },
                                { prop: Manager },
                              ],
                            ],
                        }
                      then:
                        object.from:
                          id:
                            prop: externalId
                          primaryEmail:
                            - prop: emails
                            - array.map:
                                if:
                                  condition: { equals: [{ prop: primary }, true] }
                                  then:
                                    prop: value
                                  else: false
                            - prop: 0
                      else: null
                - null.strip: null
              onSuccess:
                remapBefore:
                  from.history:
                    index: 0
                    props:
                      # Use this to store anything in the user data storage
                      externalId: { prop: externalId }
                      primaryEmail: { prop: primaryEmail }
                      userName: { prop: userName }
                      managerId: { prop: managerId }
                      team: { root }
                type: storage.write
                key: loggedInUser
                value: { root }
                onSuccess:
                  type: message
                  dismissable: true
                  body:
                    string.format:
                      template: Succesfully logged in as ''{name}''
                      values:
                        name: { prop: userName }
        events:
          listen:
            data: users
  - name: Teambarometer
    icon: question-circle
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            key: loggedInUser
            onSuccess:
              type: resource.query
              resource: survey
              query:
                object.from:
                  $filter:
                    string.format:
                      template: managerId eq ''{managerId}''
                      values:
                        managerId: { prop: managerId }
              remapAfter:
                - array.map:
                    if:
                      condition:
                        { gt: [[{ date.now }], [{ prop: startDate }, { date.parse: yyyy-MM-dd }]] }
                      then:
                        if:
                          condition:
                            {
                              lt: [[{ date.now }], [{ prop: endDate }, { date.parse: yyyy-MM-dd }]],
                            }
                          then:
                            object.from:
                              id: { prop: id }
                              title: { prop: title }
                              message: { prop: message }
                              questions: { prop: questions }
                              team: { prop: team }
                          else: null
                      else: null
              onSuccess:
                type: each
                do:
                  remapBefore:
                    - prop: team
                    - array.map:
                        if:
                          condition:
                            { equals: [{ prop: id }, [{ history: 1 }, { prop: externalId }]] }
                          then:
                            root: null
                          else: null
                    - null.strip: null
                    - prop: 0
                    - if:
                        condition: { prop: questions }
                        then:
                          root: null
                        else: null
                  type: noop
                onSuccess:
                  remapBefore:
                    - null.strip: null
                    - prop: 0
                  type: condition
                  if: { prop: questions }
                  then:
                    type: storage.write
                    key: activeSurvey
                    value: { root }
                  else:
                    type: message
                    dismissable: true
                    body:
                      Team barometer ingevuld. Op het moment zijn er geen nieuwe barometers
                      beschikbaar.
                    onSuccess:
                      type: link
                      to: Resultaten
        events:
          emit:
            data: survey
      - type: markdown
        version: *blocks-version
        parameters:
          content:
            string.format:
              template: |
                ### {title}
                {message}
              values:
                title: { prop: title }
                message: { prop: message }
        events:
          listen:
            data: survey
      - type: button-list
        version: *blocks-version
        parameters:
          buttons:
            - label: Start
              color: primary
              onClick: goToSurvey
        actions:
          goToSurvey:
            type: link
            to: Vragenlijst invullen
  - name: Vragenlijst invullen
    type: loop
    hideNavTitle: true
    retainFlowData: false
    foreach:
      name: Title
      blocks:
        - type: detail-viewer
          version: *blocks-version
          parameters:
            fields:
              - label: Question
                value: { step: question }
        - type: form
          version: *blocks-version
          parameters:
            fields:
              - type: radio
                show:
                  if:
                    condition: { equals: [{ step: answerType }, meerkeuze] }
                    then: true
                    else: false
                name: answer
                requirements:
                  - required:
                      if:
                        condition: { equals: [{ step: answerType }, meerkeuze] }
                        then: true
                        else: false
                options:
                  - value: happy
                  - value: neutral
                  - value: sad
              - type: string
                name: comment
                multiline: true
                label: uitleg
          actions:
            onSubmit:
              type: flow.next
    actions:
      onLoad:
        type: storage.read
        key: activeSurvey
        onSuccess:
          type: resource.get
          resource: survey
          remapAfter:
            - prop: questions
      onFlowFinish:
        remapBefore:
          if:
            condition: { prop: 0 }
            then:
              array.map:
                object.omit:
                  - answerType
            else:
              array.from:
                - object.omit:
                    - answerType
        type: storage.read
        key: activeSurvey
        remapAfter:
          object.from:
            answers:
              history: 0
            surveyId:
              prop: id
        onSuccess:
          type: resource.create
          resource: answers
          onSuccess:
            type: storage.read
            key: loggedInUser
            onSuccess:
              type: resource.query
              resource: survey
              query:
                object.from:
                  $filter:
                    string.format:
                      template: id eq ''{surveyId}''
                      values:
                        surveyId: [{ history: 2 }, { prop: surveyId }]
              remapAfter:
                # Remove logged in user from the questionnaire (because they filled it in already)
                - prop: 0
                - object.assign:
                    team:
                      - prop: team
                      - array.map:
                          if:
                            condition:
                              { equals: [{ prop: id }, [{ history: 3 }, { prop: externalId }]] }
                            then: null
                            else:
                              object.from:
                                id:
                                  prop: id
                                primaryEmail:
                                  prop: primaryEmail
                      - null.strip: null
              onSuccess:
                type: resource.update
                resource: survey
                onSuccess:
                  type: link
                  to: Vragenlijst bedankt

  - name: Vragenlijst bedankt
    hideNavTitle: true
    blocks:
      - type: markdown
        version: *blocks-version
        parameters:
          content: |
            ### Bedankt
            Bedankt voor je deelname. Momenteel heb je alle vragen beantwoord.
            De resultaten kun je bekijken op de resultaten pagina.

            We hopen dat je de volgende keer weer mee doet.
  - name: Maak vragenlijst
    icon: plus
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: resource.query
            resource: survey
        events:
          emit:
            data: surveys
      - type: table
        version: *blocks-version
        parameters:
          fields:
            - label: Naam
              value: { prop: title }
            - label: Status
              value: { prop: status }
            - dropdown:
                icon: ellipsis-vertical
                options:
                  - label: Bewerken
                    onClick: editSurvey
                  - label: Reminder sturen
                    onClick: sendReminder
        actions:
          editSurvey:
            type: storage.delete # can be removed
            storage: localStorage
            key: editSurvey
            onSuccess:
              type: storage.write
              storage: localStorage
              key: editSurvey
              value: { root }
              onSuccess:
                type: link
                to: Vragenlijst details
                onSuccess: *clear-temp-formdata
          sendReminder:
            type: storage.write
            storage: sessionStorage
            key: survey
            value: { root }
            onSuccess:
              type: link
              to: Reminders
        events:
          listen:
            data: surveys
      - type: button-list
        version: *blocks-version
        parameters:
          buttons:
            - label: Maak vragenlijst
              color: primary
              onClick: createQuestionnaire
        actions:
          createQuestionnaire: # redundant delete
            type: storage.delete
            key: tempQuestions
            storage: localStorage
            onSuccess:
              type: storage.delete
              storage: localStorage
              key: editSurvey
              onSuccess:
                type: storage.delete
                key: tempSurveyUsers
                storage: localStorage
                onSuccess:
                  type: link
                  to: Vragenlijst details
                  onSuccess: *clear-temp-formdata

  - name: Resultaten
    icon: square-poll-vertical
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: resource.query
            resource: survey
        events:
          emit:
            data: surveys
      - type: table
        version: *blocks-version
        parameters:
          fields:
            - label: Naam
              value: { prop: title }
            - onClick: seeResults
              button:
                color: primary
                label: Resultaten
                title: Zie resultaten
        actions:
          seeResults:
            type: storage.delete
            key: resultSurvey
            onSuccess:
              type: link
              to: Resultaat
        events:
          listen:
            data: surveys
  - name: Resultaat
    parameters:
      - id
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: resource.get
            resource: survey
            onSuccess:
              type: storage.write
              key: resultSurvey
              value: { root }
              onSuccess:
                type: resource.count
                resource: answers
                query:
                  object.from:
                    $filter:
                      string.format:
                        template: surveyId eq ''{surveyId}''
                        values:
                          surveyId: { prop: id }
                onSuccess:
                  type: condition
                  if:
                    lt:
                      - root: null
                      - 5
                  then:
                    type: message
                    body: Not enough people have answered this survey.
                    onSuccess:
                      type: link
                      to: Resultaten
                  else:
                    type: noop
        events:
          emit:
            data: resultSurvey
      - type: '@eindhoven/results-loader'
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            key: resultSurvey
            onSuccess:
              type: resource.query
              resource: answers
              query:
                object.from:
                  $filter:
                    string.format:
                      template: surveyId eq ''{surveyId}''
                      values:
                        surveyId: { prop: id }
              remapAfter:
                array.map:
                  object.assign:
                    colors:
                      static: ['rgb(255, 0, 0', 'rgb(255, 230, 0)', 'rgb(0, 255, 0)']
        events:
          listen:
            data: resultSurvey
          emit:
            data: stats
      - type: chart
        version: *blocks-version
        events:
          listen:
            replace: stats
        parameters:
          type: bar
          backgroundColors:
            - 'rgb(0, 255, 0)'
            - 'rgb(255, 230, 0)'
            - 'rgb(255, 0, 0'
          # labelOptions:
          #   font:
          #     size: 16
          #   maxWidth: 20
          yAxis:
            step: 1
            colors:
              - '#aaaaaa'
        actions:
          onClick:
            type: noop
            onSuccess:
              type: storage.read
              key: resultSurvey
              onSuccess:
                type: resource.query
                resource: answers
                query:
                  object.from:
                    $filter:
                      string.format:
                        template: surveyId eq ''{surveyId}''
                        values:
                          surveyId: { prop: id }
                onSuccess:
                  type: storage.write
                  key: activeComments
                  storage: localStorage
                  value:
                    array.from: []
                  onSuccess:
                    type: each
                    do:
                      remapBefore:
                        - prop: answers
                        - array.map:
                            if:
                              condition:
                                { equals: [[{ history: 0 }, { prop: label }], { prop: question }] }
                              then:
                                object.omit:
                                  - answer
                                  - question
                              else: null
                        - null.strip: null
                      type: noop
                    onSuccess:
                      type: each
                      serial: true
                      do:
                        type: each
                        serial: true
                        do:
                          type: storage.append
                          key: activeComments
                          storage: localStorage
                          value:
                            prop: comment
                          onSuccess:
                            type: link
                            to: Opmerkingen wolk

  - name: Opmerkingen wolk
    hideNavTitle: true
    blocks:
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            key: activeComments
            storage: localStorage
        events:
          emit:
            data: comments
      - type: control-buttons
        version: *blocks-version
        parameters:
          forward: false
        actions:
          onBack:
            type: storage.delete
            key: activeComments
            storage: localStorage
            onSuccess:
              type: storage.read
              key: resultSurvey
              onSuccess:
                type: link
                to: Resultaten
      - type: wordcloud
        version: *blocks-version
        parameters:
          fields:
            - { root }
          options:
            weightFactor: 40
        events:
          listen:
            data: comments

  - name: Vragenlijst details
    icon: plus
    type: flow
    retainFlowData: false
    hideNavTitle: true
    actions:
      onFlowFinish:
        type: link
        to: Maak vragenlijst
    steps:
      - name: Nieuwe vragenlijst
        blocks:
          - type: data-loader
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                storage: localStorage
                key: editSurvey
                onError:
                  type: noop
            events:
              emit:
                data: editData
          - type: form
            version: *blocks-version
            parameters:
              fields:
                - label: Naam vragenlijst
                  name: title
                  type: string
                  requirements:
                    - required: true
                - label: Bericht
                  name: message
                  type: string
                  multiline: true
                  requirements:
                    - required: true
            actions:
              onSubmit:
                type: condition
                if: { gt: [{ prop: id }, -1] }
                then:
                  type: resource.patch
                  resource: survey
                  onSuccess:
                    type: storage.write
                    storage: localStorage
                    key: editSurvey
                    value: { root }
                else:
                  type: resource.create
                  resource: survey
                  body:
                    - root:
                    - object.assign: { status: Concept }
                onSuccess:
                  type: storage.write
                  storage: localStorage
                  key: surveyId
                  value: { prop: id }
                  onSuccess:
                    type: flow.next
            events:
              listen:
                data: editData
      - name: Questions
        blocks:
          # Patch survey when question changed
          - type: data-loader
            version: *blocks-version
            parameters:
              skipInitialLoad: true
            actions:
              onLoad:
                type: storage.read
                storage: localStorage
                key: tempQuestions
                onSuccess:
                  type: storage.read
                  storage: localStorage
                  key: surveyId
                  onSuccess:
                    remapBefore:
                      object.from:
                        id: { root }
                        questions: { history: 1 }
                    type: resource.patch
                    resource: survey
            events:
              listen:
                refresh: patchQuestions
          # Setup question storage
          - type: data-loader
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                key: tempQuestions
                storage: localStorage
                onError:
                  type: storage.read
                  storage: localStorage
                  key: editSurvey
                  onSuccess:
                    type: condition
                    if: { prop: questions }
                    then:
                      type: storage.write
                      key: tempQuestions
                      storage: localStorage
                      value: { prop: questions }
                      onSuccess:
                        type: event
                        event: refreshQuestions
                    else:
                      type: noop
                  onError:
                    type: noop
          # Load questions
          - type: data-loader
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                storage: localStorage
                key: tempQuestions
                onError:
                  remapBefore:
                    array.from:
                      - object.from:
                          question: leeg
                          answerType: open
                  type: storage.write
                  key: tempQuestions
                  storage: localStorage
                  value: { root }
            events:
              listen:
                refresh: refreshQuestions
              emit:
                data: questions
          - type: control-buttons
            version: *blocks-version
            parameters:
              forward: false
            actions:
              onBack:
                type: flow.back
          - type: table
            version: *blocks-version
            parameters:
              fields:
                - label: Vraag
                  value:
                    prop: question
                - alignment: left
                  label: Type
                  dropdown:
                    label:
                      prop: answerType
                    icon: chevron-down
                    options:
                      - label: open
                        onClick: editAnswerType
                      - label: meerkeuze
                        onClick: editAnswerType
                - dropdown:
                    icon: ellipsis-vertical
                    options:
                      - label: Bewerken
                        onClick: editQuestion
                      - label: Verwijderen
                        onClick: removeQuestion
            actions:
              editQuestion:
                type: dialog
                closable: true
                blocks:
                  - type: form
                    version: *blocks-version
                    parameters:
                      fields:
                        - type: string
                          name: question
                          requirements:
                            - required: true
                    actions:
                      onSubmit:
                        type: dialog.ok
                onSuccess:
                  type: storage.update
                  key: tempQuestions
                  storage: localStorage
                  item:
                    context: index
                  value:
                    object.assign:
                      question:
                        prop: question
                  onSuccess:
                    type: event
                    event: patchQuestions
                    onSuccess:
                      type: event
                      event: refreshQuestions
              editAnswerType:
                type: storage.update
                key: tempQuestions
                storage: localStorage
                item:
                  context: index
                value:
                  if:
                    condition:
                      equals:
                        - prop: answerType
                        - open
                    then:
                      object.assign:
                        answerType: meerkeuze
                    else:
                      object.assign:
                        answerType: open
                onSuccess:
                  type: event
                  event: patchQuestions
                  onSuccess:
                    type: event
                    event: refreshQuestions
              removeQuestion:
                remapBefore:
                  object.from:
                    index:
                      context: index
                type: dialog
                closable: true
                blocks:
                  - type: markdown
                    version: *blocks-version
                    parameters:
                      content: |
                        ### Vraag verwijderen
                        Weet u zeker dat u de vraag wilt verwijderen?
                  - type: button-list
                    version: *blocks-version
                    parameters:
                      buttons:
                        - label: Verwijderen
                          onClick: onClick
                    actions:
                      onClick:
                        type: storage.update
                        key: tempQuestions
                        storage: localStorage
                        item:
                          - history: 0
                          - prop: index
                        value: null
                        onSuccess:
                          type: storage.read
                          key: tempQuestions
                          storage: localStorage
                          remapAfter:
                            null.strip: null
                          onSuccess:
                            type: storage.write
                            key: tempQuestions
                            storage: localStorage
                            value:
                              root: null
                            onSuccess:
                              type: event
                              event: patchQuestions
                              onSuccess:
                                type: event
                                event: refreshQuestions
                                onSuccess:
                                  type: dialog.ok
            events:
              listen:
                data: questions
          - type: button-list
            version: *blocks-version
            parameters:
              buttons:
                - label: Vraag toevoegen
                  color: primary
                  icon: plus
                  onClick: addQuestion
            actions:
              addQuestion:
                type: storage.append
                key: tempQuestions
                storage: localStorage
                remapBefore:
                  object.from:
                    question: leeg
                    answerType: open
                value:
                  root: null
                onSuccess:
                  type: event
                  event: patchQuestions
                  onSuccess:
                    type: event
                    event: refreshQuestions
          - type: button-list
            version: *blocks-version
            parameters:
              buttons:
                - label: Controle versturen naar
                  icon: chevron-right
                  color: primary
                  onClick: toControl
            actions:
              toControl:
                type: storage.read
                key: tempQuestions
                storage: localStorage
                remapAfter:
                  from.history:
                    index: 0
                    props:
                      message:
                        prop: message
                      title:
                        prop: title
                      questions:
                        root: null
                onSuccess:
                  type: flow.next
      - name: Controle
        blocks:
          - type: control-buttons
            version: *blocks-version
            parameters:
              forward: false
            actions:
              onBack:
                type: flow.back
          - type: data-loader
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                key: tempSurveyUsers
                storage: localStorage
                onError:
                  type: storage.read
                  storage: localStorage
                  key: editSurvey
                  onSuccess:
                    type: condition
                    if: { prop: id }
                    then:
                      type: condition
                      if: { prop: team }
                      then:
                        type: storage.write
                        key: tempSurveyUsers
                        storage: localStorage
                        value: { prop: team }
                        onSuccess:
                          type: event
                          event: refreshSurveyTeam
                      else:
                        type: storage.write
                        key: tempSurveyUsers
                        storage: localStorage
                        value: { array.from: [] }
                        onSuccess:
                          type: event
                          event: refreshSurveyTeam
                    else:
                      type: storage.read
                      key: loggedInUser
                      remapAfter:
                        prop: team
                      onSuccess:
                        type: storage.write
                        key: tempSurveyUsers
                        storage: localStorage
                        value: { root }
                        onSuccess:
                          type: event
                          event: refreshSurveyTeam
                  onError:
                    type: noop
            events:
              listen:
                refresh: checkEditSurvey
          - type: data-loader # The above and below data-loaders get called twice should prevent unnecessary calls
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                key: tempSurveyUsers
                storage: localStorage
                onSuccess:
                  type: storage.read
                  storage: localStorage
                  key: surveyId
                  onSuccess:
                    remapBefore:
                      object.from:
                        id: { root }
                        team: { history: 1 }
                    type: resource.patch
                    resource: survey
                    remapAfter: { history: 1 }
                onError:
                  type: event
                  event: checkEditSurvey
            events:
              emit:
                data: team
              listen:
                refresh: refreshSurveyTeam
          - type: detail-viewer
            version: *blocks-version
            parameters:
              fields:
                - label: Controle verzenden naar
          - type: table
            version: *blocks-version
            parameters:
              fields:
                - label: Medewerkers
                  value: { prop: primaryEmail }
                - onClick: removeEmployee
                  button:
                    outlined: true
                    color: danger
                    label: Delete
            actions:
              removeEmployee:
                type: storage.read
                key: tempSurveyUsers
                storage: localStorage
                onSuccess:
                  type: noop
                  remapAfter:
                    array.map:
                      if:
                        condition: { equals: [{ prop: id }, [{ history: 0 }, { prop: id }]] }
                        then: null
                        else:
                          object.from:
                            id:
                              prop: id
                            primaryEmail:
                              prop: primaryEmail
                  onSuccess:
                    remapBefore:
                      null.strip: null
                    type: storage.write
                    key: tempSurveyUsers
                    storage: localStorage
                    value:
                      root: null
                    onSuccess:
                      type: event
                      event: refreshSurveyTeam
            events:
              listen:
                data: team
          - type: button-list
            version: *blocks-version
            parameters:
              buttons:
                - label:
                    translate: buttonToPlanning
                  icon: chevron-right
                  color: primary
                  onClick: toPlanning
            actions:
              toPlanning:
                type: flow.next
      - name: Inplannen
        blocks:
          - type: data-loader
            version: *blocks-version
            actions:
              onLoad:
                type: storage.read
                storage: localStorage
                key: editSurvey
                remapAfter:
                  object.from:
                    startDate:
                      prop: startDate
                    endDate:
                      prop: endDate
                onError:
                  type: noop
            events:
              emit:
                data: editData
          - type: control-buttons
            version: *blocks-version
            parameters:
              forward: false
            actions:
              onBack:
                type: flow.back
          - type: form
            version: *blocks-version
            parameters:
              fields:
                - label: Start
                  name: startDate
                  icon: calendar
                  type: date
                  requirements:
                    - required: true
                    - from: { date.now }
                - label: Tot
                  name: endDate
                  icon: calendar
                  type: date
                  requirements:
                    - required: true
                    - from: [{ date.now }, { date.add: 1d }]
            actions:
              onSubmit:
                type: storage.read
                key: surveyId
                storage: localStorage
                remapAfter:
                  - object.from:
                      id: { root }
                  - assign.history:
                      index: 0
                      props:
                        startDate: { prop: startDate }
                        endDate: { prop: endDate }
                onSuccess:
                  remapBefore:
                    object.assign:
                      status: *status-checker
                  type: resource.patch
                  resource: survey
                  onSuccess:
                    type: flow.finish
            events:
              listen:
                data: editData
          - type: button-list
            version: *blocks-version
            parameters:
              buttons:
                - label: Save as concept
                  color: primary
                  outlined: true
                  title: concept
                  onClick: saveConcept
            actions:
              saveConcept:
                type: storage.read
                key: surveyId
                storage: localStorage
                onSuccess:
                  remapBefore:
                    object.from:
                      id: { root }
                      status: Concept
                      startDate: ''
                      endDate: ''
                  type: resource.patch
                  resource: survey
                  onSuccess:
                    type: flow.finish

  - name: Reminders
    hideNavTitle: true
    blocks:
      - type: control-buttons
        version: *blocks-version
        parameters:
          forward: false
        actions:
          onBack:
            type: link
            to: Maak vragenlijst
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            storage: sessionStorage
            key: survey
            remapAfter: { prop: id }
            onSuccess:
              type: resource.query
              resource: reminder
              query:
                object.from:
                  $filter:
                    string.format:
                      template: surveyId eq ''{surveyId}'' and date gt ''{date}''
                      values:
                        surveyId: { root }
                        date: [{ date.now }, { date.format }]
        events:
          emit:
            data: reminders
          listen:
            refresh: refresh
      - type: table
        version: *blocks-version
        events:
          listen:
            data: reminders
        parameters:
          fields:
            - label: Notifications
              value: { prop: title }
            - label: Wanneer
              value:
                string.format:
                  template: '{date, date, ::dd}-{date, date, ::MM}-{date, date, ::yyyy}'
                  values:
                    date:
                      - prop: date
                      - date.parse: ''
            - alignment: right
              dropdown:
                icon: ellipsis-vertical
                options:
                  - onClick: editReminder
                    label: Bewerken
                  - onClick: deleteReminder
                    label: Verwijderen
        actions:
          editReminder:
            type: storage.write
            storage: sessionStorage
            key: reminder
            value: { root }
            onSuccess:
              type: link
              to: EditReminder
          deleteReminder:
            type: resource.delete
            resource: reminder
            onSuccess:
              type: event
              event: refresh
      - type: button-list
        version: *blocks-version
        parameters:
          buttons:
            - label: Notificatie toevoegen
              color: primary
              onClick: addReminder
        actions:
          addReminder:
            type: link
            to: AddReminder

  - name: AddReminder
    hideNavTitle: true
    blocks:
      - type: control-buttons
        version: *blocks-version
        parameters:
          forward: false
        actions:
          onBack:
            type: link
            to: Reminders
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            storage: sessionStorage
            key: survey
            remapAfter:
              object.from:
                surveyId: { prop: id }
        events:
          emit:
            data: surveyId
      - type: form
        version: *blocks-version
        events:
          listen:
            data: surveyId
        actions:
          onSubmit:
            remapBefore:
              object.from:
                title: { prop: title }
                content: { prop: content }
                surveyId: { prop: surveyId }
                date:
                  - prop: date
                  - date.parse: 'yyyy-MM-dd'
                  - date.add: 11h # set time to 10am
            type: resource.create
            resource: reminder
            onSuccess:
              type: link
              to: Reminders
        parameters: *reminder-fields

  - name: EditReminder
    hideNavTitle: true
    blocks:
      - type: control-buttons
        version: *blocks-version
        parameters:
          forward: false
        actions:
          onBack:
            type: link
            to: Reminders
      - type: data-loader
        version: *blocks-version
        actions:
          onLoad:
            type: storage.read
            storage: sessionStorage
            key: reminder
        events:
          emit:
            data: reminder
      - type: form
        version: *blocks-version
        events:
          listen:
            data: reminder
        actions:
          onSubmit:
            remapBefore:
              object.from:
                id: { prop: id }
                title: { prop: title }
                content: { prop: content }
                surveyId: { prop: surveyId }
                date:
                  - prop: date
                  - date.parse: 'yyyy-MM-dd'
                  - date.add: 11h # set time to 10am
            type: resource.update
            resource: reminder
            onSuccess:
              type: link
              to: Reminders
        parameters: *reminder-fields

cron:
  dailyReminders:
    schedule: '0 10 * * *' # every day at 10:00 am
    action:
      type: request
      url:
        string.format:
          template: https://appsemble.app/api/apps/{appId}/resources/reminder
          values:
            appId: { app: id }
      onSuccess:
        type: each
        do:
          remapBefore:
            object.assign:
              date:
                - prop: date
                - date.parse: ''
          type: condition
          if: { lt: [{ prop: date }, { date.now }] }
          then:
            type: condition
            if:
              gt:
                - prop: date
                - [{ date.now }, { date.add: '-1d' }]
            then:
              type: notify
              title: { prop: title }
              body: { prop: content }
              to: all
              onSuccess:
                type: resource.query # get user emails from SCIM
                resource: survey
                query:
                  object.from:
                    $filter:
                      string.format:
                        template: surveyId eq ''{surveyId}''
                        values:
                          surveyId:
                            - history: 1
                            - prop: surveyId
                remapAfter:
                  - prop: team
                onSuccess:
                  type: each
                  do:
                    remapBefore:
                      assign.history:
                        index: 1
                        props:
                          title: { prop: title }
                          content: { prop: content }
                    type: email
                    subject: { prop: title }
                    body: { prop: content }
                    to: { prop: primaryEmail }
            else:
              type: noop
          else:
            type: noop

  checkSurveyStatus:
    schedule: '0 10 * * *'
    action:
      type: request
      url:
        string.format:
          template: https://appsemble.app/api/apps/{appId}/resources/survey
          values:
            appId: { app: id }
      onSuccess:
        type: each
        do:
          type: condition
          if: { gt: [{ date.now: null }, [{ prop: startDate }, { date.parse: '' }]] }
          then:
            type: condition
            if:
              {
                lt:
                  [{ date.now: null }, [{ prop: startDate }, { date.parse: '' }, { date.add: 1d }]],
              }
            then:
              remapBefore:
                - prop: team
              type: each
              do:
                remapBefore:
                  object.assign:
                    surveyTitle:
                      - history: 2
                      - prop: title
                    appUrl:
                      https://team-barometer-app-2.eindhoven.appsemble.app/
                      # app: url
                type: email
                subject: Nieuwe teambarometer
                body:
                  string.format:
                    template: |
                      Er is een nieuwe teambarometer: ''{surveyName}'' beschikbaar om in te vullen!

                      Zie <{url}>
                    values:
                      url: { prop: appUrl }
                      surveyName: { prop: surveyTitle }
                to: { prop: primaryEmail }
            else:
              type: noop
          else:
            type: noop
