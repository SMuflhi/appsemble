// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getBlockConfigFromTypeScript official blocks action-button 1`] = `
{
  "actions": {
    "onClick": {
      "description": "Action that gets dispatched when the button is clicked.",
    },
  },
  "events": undefined,
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "icon": {
        "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.",
        "format": "fontawesome",
        "type": "string",
      },
    },
    "required": [
      "icon",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks button-list 1`] = `
{
  "actions": {
    "$any": {
      "description": undefined,
    },
    "onClick": {
      "description": "Action that gets dispatched when a button is clicked that doesn’t specify its own click
action.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

This data can be used with remap to display labels dynamically based on the received data.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Button": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "description": "The Bulma color to use.",
          },
          "fullwidth": {
            "description": "Whether the button should be full width or not.

By default buttons only take up as much space as needed.",
            "type": "boolean",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "inverted": {
            "description": "Whether the text and background colors should be inverted.",
            "type": "boolean",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "light": {
            "description": "When set to true, the ‘light’ set of Bulma colors are used.",
            "type": "boolean",
          },
          "onClick": {
            "description": "The name of the action to trigger when the button is clicked.",
            "format": "action",
            "type": "string",
          },
          "outlined": {
            "description": "Whether the button should display its colors in the outlines.",
            "type": "boolean",
          },
          "rounded": {
            "description": "Whether the button should be rounded.",
            "type": "boolean",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "description": "The size of the button. By default the size is ‘normal’.",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "buttons": {
        "description": "The list of buttons.",
        "items": {
          "$ref": "#/definitions/Button",
        },
        "type": "array",
      },
    },
    "required": [
      "buttons",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks data-loader 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "Action that gets dispatched when a new filter gets applied.

This also gets called during the initial load.",
    },
  },
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted once the \`onLoad\` action has finished.

It can be triggered again by sending a \`refresh\` event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "When received, the \`onLoad\` action will be triggered using the parameters passed through this
event, which in turn triggers the \`data\` emit event.",
      },
    },
  },
  "messages": {
    "loadErrorMessage": {
      "description": "The error message that should be shown when data failed to load.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "skipInitialLoad": {
        "description": "By default the \`onLoad\` action is triggered immediately.

By setting this to \`true\`, this won’t happen.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks data-notifier 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted when new data is available.",
      },
    },
    "listen": {
      "data": {
        "description": "The event to listen on for new data.",
      },
      "seed": {
        "description": "Set and emit the initial data.

This is useful for example in combination with the \`filter\` block.",
      },
    },
  },
  "messages": {
    "buttonLabel": {
      "description": "The label to display on the refresh button of the notification.",
    },
    "newMessage": {
      "description": "The message to display when new data is available.

This will be called with the \`count\` parameter, which refers to the amount of new items.",
    },
    "updatedMessage": {
      "description": "The message to display when existing data has been changed.

This will be called with the \`count\` parameter, which refers to the amount of changed items.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
    },
    "properties": {
      "color": {
        "$ref": "#/definitions/BulmaColor",
        "default": "dark",
        "description": "The Bulma color to use for the message and the refresh button.",
      },
      "id": {
        "default": "id",
        "description": "The property used to identify resources when comparing them in case of array data.",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks detail-viewer 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/FileField",
          },
          {
            "$ref": "#/definitions/GeoCoordinatesField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
        "description": "All supported types of fields.",
      },
      "FieldGroup": {
        "additionalProperties": false,
        "description": "A group of fields that is repeated for each item in it value.",
        "properties": {
          "fields": {
            "description": "The list of fields to repeat.",
            "items": {
              "$ref": "#/definitions/Field",
            },
            "type": "array",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "fields",
        ],
        "type": "object",
      },
      "FileField": {
        "additionalProperties": false,
        "description": "Displays files as images.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "repeated": {
            "description": "Display one or multiple files.",
            "type": "boolean",
          },
          "repeatedName": {
            "description": "The name of the property of the data to fetch from within each item.

If not set, the item itself is used as the url.",
            "format": "remapper",
          },
          "type": {
            "const": "file",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "GeoCoordinatesField": {
        "additionalProperties": false,
        "description": "Displays a map with a marker.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "latitude": {
            "description": "The name of the field used to access the longitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The name of the field used to access the latitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "type": {
            "const": "geocoordinates",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The path to base the longitude and latitude fields from.

If \`fields[].latitude\` and \`fields[].longitude\` are not set it defaults to \`fields[].name.lat\` and \`fields[].name.lng\`.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "description": "Displays the content as regular text.

If the content is an object it will be converted using \`JSON.stringify()\`.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "type": {
            "const": "string",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields to display based on the name from the schema.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/Field",
            },
            {
              "$ref": "#/definitions/FieldGroup",
            },
          ],
        },
        "type": "array",
      },
      "fileBase": {
        "description": "The base URL of the associated files.

If not defined, Appsemble’s Asset API will be used instead.",
        "type": "string",
      },
      "icons": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "A marker based on an existing asset.",
            "properties": {
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "asset": {
                "description": "The id of an asset to use.",
                "type": "string",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "required": [
              "asset",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
            "properties": {
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "color": {
                "$ref": "#/definitions/BulmaColor",
                "default": "primary",
                "description": "The color to apply to the icon.",
              },
              "icon": {
                "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
                "format": "fontawesome",
                "type": "string",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "type": "object",
          },
        ],
        "description": "Custom icon configuration for geocoordinate fields.",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks feed 1`] = `
{
  "actions": {
    "onAvatarClick": {
      "description": "Action that gets dispatched when a user clicks on an avatar.",
    },
    "onButtonClick": {
      "description": "Action that gets dispatched when the button is clicked.

The button won't display if this is not defined.",
    },
    "onLoadReply": {
      "description": "Action to retrieve replies, dispatched on every feed item.",
    },
    "onSubmitReply": {
      "description": "Action that gets dispatched when submitting a reply.

When submitting replies, the data will be structured
as an object containing \`parentId\` and \`content\`.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": {
    "anonymousLabel": {
      "description": "The name to display for replies without known user names.",
    },
    "emptyLabel": {
      "description": "The label that’s displayed when there are no feed items available.",
    },
    "replyErrorMessage": {
      "description": "The error message shown when an error occurs while submitting a reply.",
    },
    "replyLabel": {
      "description": "The placeholder text used for the reply input.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
    },
    "properties": {
      "buttonLabel": {
        "description": "The text that displays inside the button.",
        "type": "string",
      },
      "description": {
        "description": "The description or content of the card.",
        "format": "remapper",
      },
      "heading": {
        "description": "The heading displayed on the card.",
        "format": "remapper",
      },
      "marker": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "asset": {
                "description": "The id of an asset to use.",
                "type": "string",
              },
              "latitude": {
                "description": "The latitude of the marker.",
                "format": "remapper",
              },
              "longitude": {
                "description": "The longitude of the marker.",
                "format": "remapper",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "required": [
              "asset",
              "latitude",
              "longitude",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "properties": {
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "color": {
                "$ref": "#/definitions/BulmaColor",
                "default": "primary",
                "description": "The color to apply to the icon.",
              },
              "icon": {
                "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
                "format": "fontawesome",
                "type": "string",
              },
              "latitude": {
                "description": "The latitude of the marker.",
                "format": "remapper",
              },
              "longitude": {
                "description": "The longitude of the marker.",
                "format": "remapper",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "required": [
              "latitude",
              "longitude",
            ],
            "type": "object",
          },
        ],
        "description": "The location marker that is displayed on the card.",
      },
      "picture": {
        "description": "The highlighted picture.",
        "format": "remapper",
      },
      "pictureBase": {
        "description": "The base URL used to display pictures.

If not defined, the Asset API will be used instead.",
        "type": "string",
      },
      "pictures": {
        "description": "A list of pictures that are displayed below the highlighted picture.",
        "format": "remapper",
      },
      "reply": {
        "additionalProperties": false,
        "description": "The definition used to display replies.",
        "properties": {
          "author": {
            "default": [
              {
                "prop": "$author",
              },
              {
                "prop": "name",
              },
            ],
            "description": "The author of the reply.",
            "format": "remapper",
          },
          "content": {
            "default": {
              "prop": "content",
            },
            "description": "The content of the reply.",
            "format": "remapper",
          },
          "parentId": {
            "description": "The field that is used to associate the ID of the resource this reply belongs to.",
            "type": "string",
          },
        },
        "type": "object",
      },
      "subtitle": {
        "description": "The subtitle displayed on the card.",
        "format": "remapper",
      },
      "title": {
        "description": "The title displayed on the card.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks filter 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "The action to dispatch to load data. Typically this is a \`resource.query\` action.",
    },
  },
  "events": {
    "emit": {
      "filtered": {
        "description": "This event is emitted when new data is available because of a user interaction with filters.",
      },
      "refreshed": {
        "description": "This event is emitted when new data is available because of a refresh event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "Force reload data using the current filters.",
      },
    },
  },
  "messages": {
    "clearLabel": {
      "description": "The label of the clear button.",
    },
    "modalTitle": {
      "description": "The title of the modal.",
    },
    "submitLabel": {
      "description": "The label of the filter button.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AbstractField<\\"date\\",string>": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "date",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "ButtonOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "An icon to render on the button.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "User-facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "required": [
          "value",
          "icon",
        ],
        "type": "object",
      },
      "ButtonsField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "options": {
            "description": "A list of button options.",
            "items": {
              "$ref": "#/definitions/ButtonOption",
            },
            "type": "array",
          },
          "type": {
            "const": "buttons",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "options",
          "type",
        ],
        "type": "object",
      },
      "DateField": {
        "$ref": "#/definitions/AbstractField%3C%22date%22%2Cstring%3E",
      },
      "DateRangeField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "fromLabel": {
            "description": "The label to render on the \`from\` field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "toLabel": {
            "description": "The label to render on the \`to\` field.",
            "format": "remapper",
          },
          "type": {
            "const": "date-range",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "enum": {
            "description": "A list of enum options.",
            "items": {
              "$ref": "#/definitions/EnumOption",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "enum",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "enum",
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumOption": {
        "additionalProperties": false,
        "properties": {
          "label": {
            "description": "User facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "type": "object",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/ButtonsField",
          },
          {
            "$ref": "#/definitions/DateField",
          },
          {
            "$ref": "#/definitions/DateRangeField",
          },
          {
            "$ref": "#/definitions/EnumField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
      },
      "StringField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "exact": {
            "description": "By default string fields search for fields containing the user input.

By setting this to true, an exact match is used.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "string",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields the user is allowed to search on.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "highlight": {
        "description": "The name of a field to highlight.

This means this field will be displayed directly on the screen instead of in the modal.",
        "type": "string",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks form 1`] = `
{
  "actions": {
    "$any": {
      "description": undefined,
    },
    "onPrevious": {
      "description": "Action that gets dispatched when the previous button is clicked.",
    },
    "onSubmit": {
      "description": "Action that gets dispatched when the form is submitted.",
    },
  },
  "events": {
    "emit": {
      "change": {
        "description": "This event is emitted every time a change is made to the form.

The data received in the entire form data.",
      },
    },
    "listen": {
      "$any": {
        "description": undefined,
      },
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed and mapped to the fields as defined in the
\`fields\` parameter.",
      },
    },
  },
  "messages": {
    "fieldErrorLabel": {
      "description": undefined,
    },
    "formRequirementError": {
      "description": undefined,
    },
    "invalidLabel": {
      "description": undefined,
    },
    "optionalLabel": {
      "description": undefined,
    },
    "previousLabel": {
      "description": undefined,
    },
    "submitError": {
      "description": undefined,
    },
    "submitLabel": {
      "description": undefined,
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BooleanField": {
        "additionalProperties": false,
        "description": "A checkbox that returns \`true\` when checked and \`false\` when not.",
        "properties": {
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "labelText": {
            "description": "The text to display next to the checkbox.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.

This typically means that the checkbox *must* be checked.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "boolean",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "Choice": {
        "additionalProperties": false,
        "description": "An option that is displayed in a dropdown menu or radio button field.",
        "properties": {
          "label": {
            "description": "The label used to display the option.",
            "format": "remapper",
          },
          "value": {
            "$ref": "#/definitions/JsonValue",
            "description": "The value to use when selecting the option.",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
      "DateField": {
        "additionalProperties": false,
        "description": "A date/time picker that results in an exact date and time.",
        "properties": {
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "items": {
              "$ref": "#/definitions/DateTimeRequirement",
            },
            "type": "array",
          },
          "startOfWeek": {
            "default": 1,
            "description": "The day to display as the first day of the week.

0 means sunday, 1 means monday, etc.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
            ],
            "type": "number",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "date",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "DateTimeField": {
        "additionalProperties": false,
        "description": "A date/time picker that results in an exact date and time.",
        "properties": {
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "items": {
              "$ref": "#/definitions/DateTimeRequirement",
            },
            "type": "array",
          },
          "startOfWeek": {
            "default": 1,
            "description": "The day to display as the first day of the week.

0 means sunday, 1 means monday, etc.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
            ],
            "type": "number",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "date-time",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "DateTimeRequirement": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "A requirement used to enforce the range of available dates.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "from": {
                "description": "The minimum date that can be picked.",
                "format": "remapper",
              },
              "to": {
                "description": "The maximum date that can be picked.",
                "format": "remapper",
              },
            },
            "type": "object",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
        ],
        "description": "All requirements applicable to date-time fields.",
      },
      "EnumField": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "A dropdown list containing a list of values based on the output of an action.",
            "properties": {
              "action": {
                "description": "This action will be fired to fetch dynamic enum options.

The action should return an array of objects that contain the \`label\` and \`value\` property.",
                "format": "action",
                "type": "string",
              },
              "defaultValue": {
                "$ref": "#/definitions/JsonValue",
                "description": "The default value of the field.",
              },
              "icon": {
                "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
                "format": "fontawesome",
                "type": "string",
              },
              "label": {
                "description": "The label displayed next to the field.",
                "format": "remapper",
              },
              "loadError": {
                "default": "Error loading options",
                "description": "This message is displayed if the options failed to load.",
                "format": "remapper",
              },
              "name": {
                "description": "The name used when storing this field.",
                "type": "string",
              },
              "placeholder": {
                "description": "The placeholder to display when the field is empty.",
                "format": "remapper",
              },
              "readOnly": {
                "description": "Whether the field should be read-only.",
                "type": "boolean",
              },
              "requirements": {
                "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
                "items": {
                  "$ref": "#/definitions/RequiredRequirement",
                },
                "type": "array",
              },
              "tag": {
                "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
                "format": "remapper",
              },
              "type": {
                "const": "enum",
                "description": "The type of the field.",
                "type": "string",
              },
            },
            "required": [
              "action",
              "name",
              "type",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "A dropdown list containing a list of values based on the output of an event.",
            "properties": {
              "defaultValue": {
                "$ref": "#/definitions/JsonValue",
                "description": "The default value of the field.",
              },
              "event": {
                "description": "Wait until an event has been fired containing the list of options.

The event should return an array of objects that contain the \`label\` and \`value\` property.",
                "format": "event-listener",
                "type": "string",
              },
              "icon": {
                "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
                "format": "fontawesome",
                "type": "string",
              },
              "label": {
                "description": "The label displayed next to the field.",
                "format": "remapper",
              },
              "loadError": {
                "default": "Error loading options",
                "description": "This message is displayed if the options failed to load.",
                "format": "remapper",
              },
              "name": {
                "description": "The name used when storing this field.",
                "type": "string",
              },
              "placeholder": {
                "description": "The placeholder to display when the field is empty.",
                "format": "remapper",
              },
              "readOnly": {
                "description": "Whether the field should be read-only.",
                "type": "boolean",
              },
              "requirements": {
                "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
                "items": {
                  "$ref": "#/definitions/RequiredRequirement",
                },
                "type": "array",
              },
              "tag": {
                "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
                "format": "remapper",
              },
              "type": {
                "const": "enum",
                "description": "The type of the field.",
                "type": "string",
              },
            },
            "required": [
              "event",
              "name",
              "type",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "A dropdown list containing a list of predetermined values.",
            "properties": {
              "defaultValue": {
                "$ref": "#/definitions/JsonValue",
                "description": "The default value of the field.",
              },
              "enum": {
                "description": "The list of available choices.",
                "items": {
                  "$ref": "#/definitions/Choice",
                },
                "type": "array",
              },
              "icon": {
                "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
                "format": "fontawesome",
                "type": "string",
              },
              "label": {
                "description": "The label displayed next to the field.",
                "format": "remapper",
              },
              "name": {
                "description": "The name used when storing this field.",
                "type": "string",
              },
              "placeholder": {
                "description": "The placeholder to display when the field is empty.",
                "format": "remapper",
              },
              "readOnly": {
                "description": "Whether the field should be read-only.",
                "type": "boolean",
              },
              "requirements": {
                "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
                "items": {
                  "$ref": "#/definitions/RequiredRequirement",
                },
                "type": "array",
              },
              "tag": {
                "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
                "format": "remapper",
              },
              "type": {
                "const": "enum",
                "description": "The type of the field.",
                "type": "string",
              },
            },
            "required": [
              "enum",
              "name",
              "type",
            ],
            "type": "object",
          },
        ],
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/BooleanField",
          },
          {
            "$ref": "#/definitions/DateField",
          },
          {
            "$ref": "#/definitions/DateTimeField",
          },
          {
            "$ref": "#/definitions/EnumField",
          },
          {
            "$ref": "#/definitions/FileField",
          },
          {
            "$ref": "#/definitions/GeoCoordinatesField",
          },
          {
            "$ref": "#/definitions/HiddenField",
          },
          {
            "$ref": "#/definitions/NumberField",
          },
          {
            "$ref": "#/definitions/ObjectField",
          },
          {
            "$ref": "#/definitions/RadioField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
      },
      "FileField": {
        "additionalProperties": false,
        "description": "An input field used to upload files.",
        "properties": {
          "defaultValue": {
            "description": "The default value for the field.",
            "type": "string",
          },
          "emptyFileLabel": {
            "default": " ",
            "description": "The label that is shown for empty files.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "maxHeight": {
            "description": "The maximum height of uploaded images.",
            "type": "number",
          },
          "maxWidth": {
            "description": "The maximum width of uploaded images.",
            "type": "number",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "quality": {
            "description": "The quality modifier to use when uploading images, in percentages.",
            "type": "number",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "repeated": {
            "default": false,
            "description": "Boolean value representing whether to accept one file or multiple files.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/FileRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "file",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "FileRequirement": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "accept": {
                "description": "The list of accepted [MIME-types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types).",
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
            },
            "required": [
              "accept",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "A requirement used to enforce the length or amount of items in the input.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "maxLength": {
                "description": "The maximum length.",
                "minimum": 1,
                "type": "number",
              },
              "minLength": {
                "description": "The minimum length.",
                "minimum": 1,
                "type": "number",
              },
            },
            "type": "object",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
        ],
        "description": "All requirements applicable to file fields.",
      },
      "GeoCoordinatesField": {
        "additionalProperties": false,
        "description": "A location picker used to select a location.",
        "properties": {
          "defaultLocation": {
            "default": [
              51.476852,
              0,
            ],
            "description": "The location (latitude, longitude) to default to when the user’s location cannot be found.

This can be used to set the location to something that is more relevant to the user.",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "defaultValue": {
            "additionalProperties": {
              "type": "number",
            },
            "description": "The default value of the field.",
            "type": "object",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "locationError": {
            "default": "Couldn’t find your location. Are location services enabled?",
            "description": "The error message to display when the location couldn’t be determined.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "geocoordinates",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "HiddenField": {
        "additionalProperties": false,
        "description": "A hidden field. This is useful for submitting default values the user may not change.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "hidden",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "JsonArray": {
        "description": "Matches a JSON array.",
        "items": {
          "$ref": "#/definitions/JsonValue",
        },
        "type": "array",
      },
      "JsonObject": {
        "additionalProperties": {
          "$ref": "#/definitions/JsonValue",
        },
        "description": "Matches a JSON object.

This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: \`jsonObject as unknown as CustomResponse\`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: \`interface CustomResponse extends JsonObject { … }\`.",
        "type": "object",
      },
      "JsonValue": {
        "anyOf": [
          {
            "type": "string",
          },
          {
            "type": "number",
          },
          {
            "type": "boolean",
          },
          {
            "type": "null",
          },
          {
            "$ref": "#/definitions/JsonObject",
          },
          {
            "$ref": "#/definitions/JsonArray",
          },
        ],
        "description": "Matches any valid JSON value.",
      },
      "NumberField": {
        "additionalProperties": false,
        "description": "A number entry field.",
        "properties": {
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "number",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/NumberRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "description": "The type of the field.",
            "enum": [
              "integer",
              "number",
            ],
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "NumberRequirement": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "Minimum and maximum form requirements for number fields.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "max": {
                "description": "The maximum value of the field.",
                "type": "number",
              },
              "min": {
                "description": "The minimum value of the field.",
                "type": "number",
              },
            },
            "type": "object",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
          {
            "additionalProperties": false,
            "description": "Requirement used to indicate how big a step should be for the field.

Note that for \`integer\` type fields are rounded _down_.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "step": {
                "description": "The amount to increment or decrement when using the stepper buttons of the field.",
                "type": "number",
              },
            },
            "required": [
              "step",
            ],
            "type": "object",
          },
        ],
        "description": "All requirements applicable to number fields.",
      },
      "ObjectField": {
        "additionalProperties": false,
        "properties": {
          "addLabel": {
            "default": "Remove",
            "description": "The label to show on the button for adding a new entry for repeated fields.",
            "format": "remapper",
          },
          "fields": {
            "description": "The fields contained by this object.",
            "items": {
              "$ref": "#/definitions/Field",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "removeLabel": {
            "default": "Add",
            "description": "The label to show on the button for removing an entry for repeated fields.",
            "format": "remapper",
          },
          "repeated": {
            "description": "If true, this field represents an array of objects.",
            "type": "boolean",
          },
          "requirements": {
            "description": "Requirements that are applicable to an object field.",
            "items": {
              "$ref": "#/definitions/ObjectRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "object",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "fields",
          "name",
          "type",
        ],
        "type": "object",
      },
      "ObjectRequirement": {
        "additionalProperties": false,
        "description": "All requirements applicable to object fields.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "maxLength": {
            "description": "The maximum length.",
            "minimum": 1,
            "type": "number",
          },
          "minLength": {
            "description": "The minimum length.",
            "minimum": 1,
            "type": "number",
          },
        },
        "type": "object",
      },
      "RadioField": {
        "additionalProperties": false,
        "description": "A radio button that returns the associated value when selected.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "options": {
            "description": "The list of options the user can select from.",
            "items": {
              "$ref": "#/definitions/Choice",
            },
            "type": "array",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "radio",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "RequiredRequirement": {
        "additionalProperties": false,
        "description": "Requirement used to mark the field as required.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "required": {
            "description": "Whether the field is required.",
            "type": "boolean",
          },
        },
        "required": [
          "required",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "description": "Fields with the type of [\`string\`](#StringField) support requirements. This is an array of requirements that are used to validate the value the user inputs. Each requirement can be provided with its own custom error message, allowing for better feedback towards users.

For example, the [\`regex\`](#RegexRequirement) requirement type allows you to validate a field using [Regular Expressions](https://learnxinyminutes.com/docs/pcre/). So for example if you want a string field that requires a field to be an email address that ends with “@appsemble.com”, you could enforce this like so:

\`\`\`yaml type: string requirements:   - regex: \\\\w+@appsemble\\\\.com     errorMessage: Value does not end with “@appsemble.com” \`\`\`",
        "properties": {
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "string",
          },
          "format": {
            "description": "The format to use for validation.",
            "enum": [
              "email",
              "url",
            ],
            "type": "string",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "multiline": {
            "default": false,
            "description": "Whether the string field should be multiline or not.",
            "type": "boolean",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "description": "Whether the field should be read-only.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/StringRequirement",
            },
            "type": "array",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "string",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "StringRequirement": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "A requirement used to enforce the length or amount of items in the input.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "maxLength": {
                "description": "The maximum length.",
                "minimum": 1,
                "type": "number",
              },
              "minLength": {
                "description": "The minimum length.",
                "minimum": 1,
                "type": "number",
              },
            },
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "Requirement that matches using a given regex.",
            "properties": {
              "errorMessage": {
                "description": "The error message that is displayed when the requirement is not met.",
                "format": "remapper",
              },
              "flags": {
                "default": "g",
                "description": "The flags to use for the regex.

Supported values: \`g\`, \`m\`, \`i\`, \`y\`, \`u\`, \`s\`",
                "pattern": "^[gimsuy]+$",
                "type": "string",
              },
              "regex": {
                "description": "The regex to match with. Must be a valid JavaScript regex.",
                "type": "string",
              },
            },
            "required": [
              "regex",
            ],
            "type": "object",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
        ],
        "description": "All requirements applicable to string fields.",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of objects describing each field that can be entered in the form.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "previous": {
        "description": "Whether the previous button should be shown.",
        "type": "boolean",
      },
      "requirements": {
        "description": "A list of requirements that are checked across all of the form data.",
        "items": {
          "additionalProperties": false,
          "properties": {
            "action": {
              "description": "The name of the action to trigger when the requirement is checked.",
              "format": "action",
              "type": "string",
            },
            "errorMessage": {
              "description": "The error message that is displayed when the requirement is not met.",
              "format": "remapper",
            },
            "isValid": {
              "description": "The list of fields that must be valid before running the requirement action.",
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
          "required": [
            "isValid",
            "action",
          ],
          "type": "object",
        },
        "type": "array",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks html 1`] = `
{
  "actions": {
    "$any": {
      "description": undefined,
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Data that can be used in the placeholder remappers.

All elements specifying \`data-content\` will be updated each time this event is received.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "content": {
        "description": "The HTML to render.",
        "type": "string",
      },
      "placeholders": {
        "additionalProperties": {
          "format": "remapper",
        },
        "description": "The placeholders that are injected on elements with the \`data-content\` property.",
        "type": "object",
      },
    },
    "required": [
      "content",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks list 1`] = `
{
  "actions": {
    "onClick": {
      "description": "Action that gets triggered when clicking on a list item.

If defined, an indicator will show up to show that the list item has a click action.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed. Must be a set of data.",
      },
    },
  },
  "messages": {
    "error": {
      "description": "The text that is shown when something went wrong with fetching the data.",
    },
    "noData": {
      "description": "The text that is shown when no data was found.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Field": {
        "additionalProperties": false,
        "description": "An object representing how a data field should be displayed.",
        "properties": {
          "icon": {
            "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to display in front of the label.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "value": {
            "description": "The name of the field to read from to determine the value to show.

No value will be rendered if undefined.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "base": {
        "description": "An optional name of the field that contains the data.

If not defined, received data will be treated as an array.",
        "type": "string",
      },
      "fields": {
        "description": "A list of fields to display.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "header": {
        "description": "The header text to display above the list of fields.

Will not render if undefined.",
        "format": "remapper",
      },
      "icon": {
        "description": "The icon that displays in front of the header.

Will not render if undefined.",
        "format": "fontawesome",
        "type": "string",
      },
      "image": {
        "description": "The image that is shown to the left of the list item.

This can be either a full image path or an asset id.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks map 1`] = `
{
  "actions": {
    "onMarkerClick": {
      "description": "Action that gets dispatched when a marker is clicked.",
    },
  },
  "events": {
    "emit": {
      "move": {
        "description": "Event that gets emitted when moving the map around.

Will apply [OData filters](https://www.odata.org) to limit the range of items fetched. This
will be skipped if the move emit event is not defined.",
      },
    },
    "listen": {
      "center": {
        "description": "An event that can be triggered to center the map’s position to the user’s current location.",
      },
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed. Must be a set of data.",
      },
      "follow": {
        "description": "Toggles whether or not the map should follow the user’s location. Defaults to not following.

If the value is exactly \`true\` or \`false\`, the following state will be set to that value.
Otherwise, it will toggle between following and not following.",
      },
    },
  },
  "messages": {
    "locationError": {
      "description": "The error message to display when the location couldn’t be determined.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
    },
    "properties": {
      "defaultLocation": {
        "default": [
          51.476852,
          0,
        ],
        "description": "The location (latitude, longitude) to default to when the user’s location cannot be found.

This can be used to set the location to something that is more relevant to the user.",
        "items": {
          "type": "number",
        },
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "disableClustering": {
        "description": "Whether clustering should be disabled.

By default markers are clustered if they are too close to each other.",
        "type": "boolean",
      },
      "filterLatitudeName": {
        "default": "lat",
        "description": "The name of the latitude property in the resource.

These are used for filtering purposes.",
        "type": "string",
      },
      "filterLongitudeName": {
        "default": "lng",
        "description": "The name of the longitude property in the resource.

These are used for filtering purposes.",
        "type": "string",
      },
      "icons": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "A marker based on an existing asset.",
            "properties": {
              "activeRatio": {
                "default": 1,
                "description": "Enlarge an active marker with this ratio.

This modifier is applied if a marker matches the block data which may be received by the block context. For example, this is applied if a marker matches the data that was passed in from a link action.",
                "type": "number",
              },
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "asset": {
                "description": "The id of an asset to use.",
                "type": "string",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "required": [
              "asset",
            ],
            "type": "object",
          },
          {
            "additionalProperties": false,
            "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
            "properties": {
              "activeRatio": {
                "default": 1,
                "description": "Enlarge an active marker with this ratio.

This modifier is applied if a marker matches the block data which may be received by the block context. For example, this is applied if a marker matches the data that was passed in from a link action.",
                "type": "number",
              },
              "anchor": {
                "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
                "items": {
                  "type": "number",
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
              "color": {
                "$ref": "#/definitions/BulmaColor",
                "default": "primary",
                "description": "The color to apply to the icon.",
              },
              "icon": {
                "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
                "format": "fontawesome",
                "type": "string",
              },
              "size": {
                "default": 28,
                "description": "The height of marker icons in pixels.",
                "type": "number",
              },
            },
            "type": "object",
          },
        ],
        "description": "Custom icon configuration.",
      },
      "latitude": {
        "description": "The remapper used to retrieve the latitude.",
        "format": "remapper",
      },
      "longitude": {
        "description": "The remapper used to retrieve the longitude.",
        "format": "remapper",
      },
      "maxClusterRadius": {
        "default": 80,
        "description": "The maximum radius that a cluster will cover from the central marker (in pixels).

Decreasing will make more, smaller clusters. One can also use a function that accepts the current map zoom and returns the maximum cluster radius in pixels.",
        "minimum": 1,
        "type": "number",
      },
    },
    "required": [
      "latitude",
      "longitude",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks markdown 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Data that can be used to populate \`content\` with dynamic content.

If defined, a loader will be shown until this event is triggered.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "content": {
        "description": "A string containing the [markdown content](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) to display.",
        "format": "remapper",
      },
    },
    "required": [
      "content",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks stats 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "On what event to listen for incoming data to display.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Field": {
        "additionalProperties": false,
        "description": "An object describing what a stats field looks like.",
        "properties": {
          "icon": {
            "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to render.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label to render.",
            "format": "remapper",
          },
          "value": {
            "description": "The value of the property to render.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
          "icon",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of objects describing what the stats should look like.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks table 1`] = `
{
  "actions": {
    "$any": {
      "description": undefined,
    },
    "onClick": {
      "description": "The default action that is triggered when clicking on a row.

This does not trigger if the field has a different action specified.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Listener for data used to display data in the table.",
      },
    },
  },
  "messages": {
    "emptyMessage": {
      "description": "The message to display when the data to display is empty.",
    },
    "error": {
      "description": "The message to display when data could not be loaded.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Dropdown": {
        "additionalProperties": false,
        "properties": {
          "dropdown": {
            "additionalProperties": false,
            "properties": {
              "icon": {
                "description": "The icon to show in the dropdown button.",
                "format": "fontawesome",
                "type": "string",
              },
              "label": {
                "description": "The text to show in the dropdown button.",
                "format": "remapper",
              },
              "options": {
                "description": "The list of options to display. Must have at least 1 option.",
                "items": {
                  "$ref": "#/definitions/DropdownOption",
                },
                "minItems": 1,
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
        },
        "required": [
          "dropdown",
        ],
        "type": "object",
      },
      "DropdownOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "The icon to show in the option.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The text to show in the option.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The action that will be called when selecting this option.",
            "format": "action",
            "type": "string",
          },
        },
        "required": [
          "onClick",
        ],
        "type": "object",
      },
      "Field": {
        "additionalProperties": false,
        "description": "Represents a column that should be displayed in the table.",
        "properties": {
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The name of the action to trigger when clicking on this field.",
            "format": "action",
            "type": "string",
          },
          "value": {
            "description": "The value of the field.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
      "RepeatedField": {
        "additionalProperties": false,
        "description": "Repeated fields based on an input array.

Only one repeated field is allowed, only the first RepeatedField is considered.",
        "properties": {
          "repeat": {
            "description": "The list of fields that should be repeated for each array item.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Dropdown",
                },
                {
                  "$ref": "#/definitions/Field",
                },
              ],
            },
            "type": "array",
          },
          "value": {
            "description": "The value to use as the base of the repeated field.

Should be an array of data.",
            "format": "remapper",
          },
        },
        "required": [
          "repeat",
          "value",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields to display.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/Dropdown",
            },
            {
              "$ref": "#/definitions/Field",
            },
            {
              "$ref": "#/definitions/RepeatedField",
            },
          ],
        },
        "type": "array",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks tiles 1`] = `
{
  "actions": {
    "onClick": {
      "description": "This action is triggered when a tile is clicked.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "On what event to listen for incoming data to display.",
      },
    },
  },
  "messages": {
    "loadError": {
      "description": "This message is displayed if there was a problem loading the message.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "asset": {
        "description": "This asset will be used to render an image.

This takes precedence over an icon.",
        "format": "remapper",
      },
      "color": {
        "description": "This color is used to fill the background of the tile.",
        "format": "remapper",
      },
      "icon": {
        "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to render.

This is ignored if an asset can be resolved.",
        "format": "remapper",
      },
      "text": {
        "description": "The label to render.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks timer 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "interval": {
        "description": "The event to emit on an interval",
      },
    },
    "listen": undefined,
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "interval": {
        "description": "The time between the emitted events in seconds.",
        "type": "number",
      },
    },
    "required": [
      "interval",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks video 1`] = `
{
  "actions": {
    "onFinish": {
      "description": "The action that is dispatched when the video has finished playing.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "onVideo": {
        "description": "The event to listen on for new data.

The result must be either a video URL or an object containing a property \`url\`.",
      },
    },
  },
  "messages": {
    "loadErrorMessage": {
      "description": "The error message that should be shown when video failed to load.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "autoplay": {
        "description": "Whether the video should autoplay.

Note that this does not work on every platform due to platform restrictions.",
        "type": "boolean",
      },
      "height": {
        "description": "The height of the player.",
        "type": "string",
      },
      "maxHeight": {
        "description": "The max height of the player.",
        "type": "string",
      },
      "maxWidth": {
        "description": "The max width of the player.",
        "type": "string",
      },
      "muted": {
        "description": "Whether the player should default to being muted.",
        "type": "boolean",
      },
      "url": {
        "description": "The URL of the video.

Note that this is ignored if the onVideo event listener is set.",
        "format": "remapper",
      },
      "volume": {
        "description": "The volume in percentages the video should default to.",
        "maximum": 100,
        "minimum": 0,
        "type": "number",
      },
      "width": {
        "description": "The width of the player.",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;
