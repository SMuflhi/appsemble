{{ if .Values.provision }}
{{ $clientCredentials := split ":" .Values.provision.account.clientCredentials }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "appsemble.fullname" . }}-provision
  labels:
    app: {{ .Values.app }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "appsemble.name" . }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: {{ include "appsemble.chart" . }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: '1'
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: {{ include "appsemble.fullname" . }}-provision
          image: "bitnami/postgresql:11"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - psql
          args:
            - "--command"
            - |
              DO $$$$
              DECLARE
                UserId uuid;
              BEGIN
                INSERT INTO "User" (id, name, "primaryEmail", created, updated) VALUES (
                  {{ .Values.provision.account.id | squote }},
                  {{ .Values.provision.account.name | squote }},
                  {{ .Values.provision.account.email | squote }},
                  NOW(),
                  NOW()
                ) RETURNING id INTO UserId;
                INSERT INTO "EmailAuthorization" (email, verified, created, updated, "UserId") VALUES (
                  {{ .Values.provision.account.email | squote }},
                  true,
                  NOW(),
                  NOW(),
                  UserId
                );
                INSERT INTO "OAuth2ClientCredentials" (id, secret, description, scopes, created, "UserId") VALUES (
                  {{ $clientCredentials._0 | squote }},
                  {{ $clientCredentials._1 | squote }},
                  'Used for provisioning the review environment',
                  'apps:write blocks:write',
                  NOW(),
                  UserId
                );
              END $$$$
          env:
            - name: PGHOST
              value: {{ .Values.postgresql.fullnameOverride }}
            - name: PGPORT
              value: {{ .Values.global.postgresql.servicePort | quote }}
            - name: PGDATABASE
              value: {{ .Values.global.postgresql.postgresqlDatabase }}
            - name: PGUSER
              value: {{ .Values.global.postgresql.postgresqlUsername }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.existingSecret }}
                  key: postgresql-password
{{ end }}
