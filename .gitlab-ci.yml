image: node:10-slim

stages:
  - test
  - build
  - publish
  - deploy
  - provision

# This is the most official Helm image at the moment.
# https://github.com/helm/helm/issues/5682#issuecomment-490084864
.helm-image: &HELM
  name: lachlanevenson/k8s-helm:v2.14.1
  entrypoint: [/bin/sh, -c]

###################################################################################################
#  Test Stage                                                                                     #
###################################################################################################

# Scan for dependency vulnerabilities.
dependency scanning:
  allow_failure: true
  script:
    - yarn --frozen-lockfile
    - yarn gitlab-yarn-audit
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning.json

# Lint JavaScript code using ESLint.
eslint:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn eslint --format gitlab .
  artifacts:
    reports:
      codequality: gl-codequality.json

# Lint Helm charts.
helm lint:
  image: *HELM
  script:
    - helm init --client-only
    - helm dependency build config/charts/*
    - helm lint --strict config/charts/*

# Check formatting using prettier.
prettier:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn prettier

# Lint CSS using stylelint.
stylelint:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn stylelint .
      # This replaces the regular stylelint behaviour, instead of enhancing it.
      # https://github.com/stylelint/stylelint/issues/2369
    - yarn stylelint --report-needless-disables .

# Test the code using unit tests.
test:
  services:
    - name: mysql:8
      command: [--default-authentication-plugin=mysql_native_password]
  except:
    - schedules
  variables:
    MYSQL_DATABASE: testAppsemble
    MYSQL_ROOT_PASSWORD: password
    DATABASE_URL: 'mysql://root:password@mysql:3306'
  script:
    - yarn --frozen-lockfile
    - yarn jest --coverage --reporters default --reporters jest-junit
  artifacts:
    reports:
      junit: junit.xml

# Check type validity for our TypeScript files.
tsc:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn tsc

###################################################################################################
#  Build Stage                                                                                    #
###################################################################################################

# Build Appsemble blocks.
build blocks:
  stage: build
  except:
    - schedules
  dependencies: []
  script:
    - yarn --frozen-lockfile
    - yarn block action
    - yarn block action-button
    - yarn block detail-viewer
    - yarn block list
    - yarn block feed
    - yarn block filter
    - yarn block form
    - yarn block map
    - yarn block markdown
    - yarn block splash
  artifacts:
    expire_in: 3 days
    paths:
      - blocks/action/package.json
      - blocks/action/dist/
      - blocks/action/.appsemblerc.yaml
      - blocks/action-button/dist/
      - blocks/action-button/package.json
      - blocks/detail-viewer/dist/
      - blocks/detail-viewer/package.json
      - blocks/list/dist/
      - blocks/list/package.json
      - blocks/list/.appsemblerc.yaml
      - blocks/feed/package.json
      - blocks/feed/dist/
      - blocks/feed/.appsemblerc.yaml
      - blocks/filter/package.json
      - blocks/filter/dist/
      - blocks/filter/.appsemblerc.yaml
      - blocks/form/dist/
      - blocks/form/package.json
      - blocks/map/dist/
      - blocks/map/package.json
      - blocks/markdown/package.json
      - blocks/markdown/dist/
      - blocks/markdown/.appsemblerc.yaml
      - blocks/splash/dist/
      - blocks/splash/package.json

# Build the Docker image.
build docker image:
  stage: build
  except:
    - schedules
  dependencies: []
  services:
    - docker:dind
  image: docker
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

# Build the Docker image.
build docs image:
  stage: build
  except:
    - schedules
  dependencies: []
  services:
    - docker:dind
  image: docker
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build .
      --build-arg "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"
      --file config/docs/Dockerfile
      --tag "$CI_REGISTRY_IMAGE/docs:$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE/docs:$CI_COMMIT_REF_NAME"

# Build the npm packages that should be published.
pack:
  stage: build
  except:
    - schedules
  dependencies: []
  script:
    - yarn workspace @appsemble/cli pack
    - yarn workspace @appsemble/node-utils pack
    - yarn workspace @appsemble/react pack
    - yarn workspace @appsemble/sdk pack
    - yarn workspace @appsemble/server pack
    - yarn workspace create-appsemble pack
  artifacts:
    paths:
      - packages/**/*.tgz

###################################################################################################
#  Publish Stage                                                                                  #
###################################################################################################

# Publish the Docker image that was built to Docker Hub.
publish:docker:latest:
  stage: publish
  services:
    - docker:dind
  image: docker
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  except:
    - schedules
  dependencies: []
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "appsemble/appsemble:latest"
    - docker push "appsemble/appsemble:$CI_COMMIT_TAG"

###################################################################################################
#  Deploy Stage                                                                                   #
###################################################################################################

# Deploy the Docker image for a branch to a review environment.
review:
  stage: deploy
  image: *HELM
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  allow_failure: false
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.appsemble.app
    on_stop: stop review
  script:
    - helm init --client-only
    - helm dependency build config/charts/appsemble
    - helm upgrade "$CI_ENVIRONMENT_SLUG" config/charts/appsemble
      --atomic
      --install
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.enabled=true"
      --set "ingress.hosts={${CI_ENVIRONMENT_URL/https:\/\//}}"
      --set "ingress.tls.secretName=$CI_ENVIRONMENT_SLUG-tls"
      --set "migrateTo=999.999.999"
      --set "mysql.existingSecret=$CI_ENVIRONMENT_SLUG-mysql-secret"
      --set "mysql.fullnameOverride=$CI_ENVIRONMENT_SLUG-mysql"

# Stop a review environment.
stop review:
  stage: deploy
  image: *HELM
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  script:
    - helm delete --purge "$CI_ENVIRONMENT_SLUG"

# Deploy the Docker image for a branch to a review environment.
review docs:
  stage: deploy
  image: *HELM
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  allow_failure: false
  environment:
    name: review/docs/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.appsemble.app
    on_stop: stop review docs
  script:
    - helm upgrade "$CI_ENVIRONMENT_SLUG" config/charts/appsemble-docs
      --atomic
      --install
      --set "git.commit.sha=$CI_COMMIT_SHA"
      --set "image.tag=$CI_COMMIT_REF_NAME"

# Stop a review environment.
stop review docs:
  stage: deploy
  image: *HELM
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  environment:
    name: review/docs/$CI_COMMIT_REF_SLUG
    action: stop
  script:
    - helm delete --purge "$CI_ENVIRONMENT_SLUG"

# Deploy the Docker image for master to the staging environment.
staging:
  stage: deploy
  image: *HELM
  only:
    - master@appsemble/appsemble
  except:
    - schedules
  dependencies: []
  environment:
    name: staging
    url: https://staging.appsemble.app
    on_stop: stop staging
  script:
    - helm init --client-only
    - helm dependency build config/charts/appsemble
    - helm upgrade "$CI_ENVIRONMENT_SLUG" config/charts/appsemble
      --atomic
      --install
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.enabled=true"
      --set "ingress.hosts={staging.appsemble.app}"
      --set "ingress.tls.secretName=$CI_ENVIRONMENT_SLUG-tls"
      --set "migrateTo=999.999.999"
      --set "mysql.existingSecret=$CI_ENVIRONMENT_SLUG-mysql-secret"
      --set "mysql.fullnameOverride=$CI_ENVIRONMENT_SLUG-mysql"

# Stop the staging environment.
stop staging:
  stage: deploy
  image: *HELM
  when: manual
  only:
    - master@appsemble/appsemble
  except:
    - schedules
  dependencies: []
  environment:
    name: staging
    action: stop
  script:
    - helm delete --purge "$CI_ENVIRONMENT_SLUG"

.production:
  stage: deploy
  image: *HELM
  only:
    - tags
  dependencies: []
  environment:
    name: production
    url: https://appsemble.app
  script:
    - helm init --client-only
    - helm dependency build config/charts/appsemble
    - helm upgrade appsemble config/charts/appsemble
      --set "ingress.enabled=true"
      --set "ingress.hosts={appsemble.app}"
      --set "ingress.tls.secretName=tls-secret"
      --set "mysql.existingSecret=mysql-secret"

###################################################################################################
#  Provision Stage                                                                                #
###################################################################################################

# Provision the review environment with the blocks that were built in the build stage.
provision review: &provision
  stage: provision
  except:
    - master
    - schedules
  dependencies:
    - build blocks
    - review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
  script:
    - yarn --frozen-lockfile
    - yarn appsemble config set remote "$CI_ENVIRONMENT_URL"
    - yarn appsemble config set email "$APPSEMBLE_EMAIL"
    - yarn appsemble config set password "$APPSEMBLE_PASSWORD"
    - node -r esm ./config/bin/register.js
    - yarn appsemble login
    - yarn appsemble block register blocks/action
    - yarn appsemble block register blocks/action-button
    - yarn appsemble block register blocks/detail-viewer
    - yarn appsemble block register blocks/list
    - yarn appsemble block register blocks/feed
    - yarn appsemble block register blocks/filter
    - yarn appsemble block register blocks/form
    - yarn appsemble block register blocks/map
    - yarn appsemble block register blocks/markdown
    - yarn appsemble block register blocks/splash

# Provision the staging environment with the blocks that were built in the build stage.
provision staging:
  <<: *provision
  except:
    - schedules
  only:
    - master@appsemble/appsemble
  environment:
    name: staging
  dependencies:
    - build blocks
    - staging
