image: node:10-slim

stages:
  - test
  - build
  - publish
  - deploy
  - provision

###################################################################################################
#  Test Stage                                                                                     #
###################################################################################################

# Scan for dependency vulnerabilities.
dependency scanning:
  allow_failure: true
  script:
    - yarn --frozen-lockfile
    - yarn gitlab-yarn-audit
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning.json

# Lint JavaScript code using ESLint.
eslint:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn eslint
  artifacts:
    reports:
      codequality: gl-codequality.json

# Check formatting using prettier.
prettier:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn prettier

# Lint CSS using stylelint.
stylelint:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn stylelint
      # This replaces the regular stylelint behaviour, instead of enhancing it.
      # https://github.com/stylelint/stylelint/issues/2369
    - yarn stylelint:rd

# Test the code using unit tests.
test:
  services:
    - name: mysql:8
      command: [--default-authentication-plugin=mysql_native_password]
  except:
    - schedules
  variables:
    MYSQL_DATABASE: testAppsemble
    MYSQL_ROOT_PASSWORD: password
    DATABASE_URL: 'mysql://root:password@mysql:3306'
  script:
    - yarn --frozen-lockfile
    - yarn jest --coverage --reporters default --reporters jest-junit
  artifacts:
    reports:
      junit: junit.xml

# Check type validity for our TypeScript files.
tsc:
  except:
    - schedules
  script:
    - yarn --frozen-lockfile
    - yarn tsc --noEmit

###################################################################################################
#  Build Stage                                                                                    #
###################################################################################################

# Build Appsemble blocks.
build blocks:
  stage: build
  except:
    - schedules
  dependencies: []
  script:
    - yarn --frozen-lockfile
    - yarn block action-button
    - yarn block detail-viewer
    - yarn block list
    - yarn block form
    - yarn block map
    - yarn block markdown
    - yarn block splash
  artifacts:
    expire_in: 3 days
    paths:
      - blocks/action-button/dist/
      - blocks/action-button/package.json
      - blocks/detail-viewer/dist/
      - blocks/detail-viewer/package.json
      - blocks/list/dist/
      - blocks/list/package.json
      - blocks/list/.appsemblerc.yaml
      - blocks/form/dist/
      - blocks/form/package.json
      - blocks/map/dist/
      - blocks/map/package.json
      - blocks/markdown/package.json
      - blocks/markdown/dist/
      - blocks/markdown/.appsemblerc.yaml
      - blocks/splash/dist/
      - blocks/splash/package.json

# Build the Docker image.
build docker image:
  stage: build
  except:
    - schedules
  dependencies: []
  services:
    - docker:dind
  image: docker
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

# Build the npm packages that should be published.
pack:
  stage: build
  except:
    - schedules
  dependencies: []
  script:
    - yarn workspace @appsemble/cli pack
    - yarn workspace @appsemble/node-utils pack
    - yarn workspace @appsemble/react pack
    - yarn workspace @appsemble/sdk pack
    - yarn workspace @appsemble/server pack
    - yarn workspace create-appsemble pack
  artifacts:
    paths:
      - packages/**/*.tgz

# Build documentation to be hosted on GitLab pages.
pages:
  stage: build
  only:
    - master
  except:
    - schedules
  dependencies: []
  script: &pages-script
    - yarn --frozen-lockfile
    - apt-get update
    # The line below is for puppeteer, see: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md
    - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3
      libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0
      libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1
      libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1
      libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release
      xdg-utils wget
    - yarn gitbook install
    - yarn gitbook build . public
    - mkdir -p public/docs/images
    - >
      for input in docs/images/*.mmd; do
        output=public/docs/images/$(basename $input .mmd).svg
        yarn mmdc -p puppeteer-config.json -i $input -o $output
      done
    - yarn typedoc --out public/sdk --includeDeclarations --excludeExternals --mode file --target
      ES6 --ignoreCompilerErrors packages/sdk
  artifacts:
    paths:
      - public/

# Build documentation for review purposes.
review pages:
  stage: build
  only:
    - branches
  except:
    - master
    - schedules
  dependencies: []
  environment:
    name: pages/$CI_COMMIT_REF_SLUG
    url: https://$CI_PROJECT_NAMESPACE.$CI_PAGES_DOMAIN/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/index.html
  script: *pages-script
  artifacts:
    paths:
      - public/

###################################################################################################
#  Publish Stage                                                                                  #
###################################################################################################

# Publish the Docker image that was built to Docker Hub.
publish:docker:latest:
  stage: publish
  services:
    - docker:dind
  image: docker
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  except:
    - schedules
  dependencies: []
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "appsemble/appsemble:latest"
    - docker push "appsemble/appsemble:$CI_COMMIT_TAG"

###################################################################################################
#  Deploy Stage                                                                                   #
###################################################################################################

# Deploy the Docker image for a branch to a review environment.
review:
  stage: deploy
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  allow_failure: false
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.appsemble.app
    on_stop: stop review
  script:
    - yarn --frozen-lockfile
    # This allows passing these variables for use in later stages.
    - yarn appsemble config set email bot@appsemble.com
    - yarn appsemble config set password "$(openssl rand -base64 12)"
    - yarn appsemble config set remote "$CI_ENVIRONMENT_URL"
    - node -r esm config/bin/deploy.js
  artifacts:
    expire_in: 1 day
    paths:
      - package.json

# Stop a review environment.
stop review:
  stage: deploy
  when: manual
  except:
    - master
    - schedules
  dependencies: []
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  script:
    - yarn --frozen-lockfile
    - node -r esm config/bin/stop.js

# Deploy the Docker image for master to the staging environment.
staging:
  stage: deploy
  only:
    - master@appsemble/appsemble
  except:
    - schedules
  dependencies: []
  environment:
    name: review/master
    url: https://staging.appsemble.app
    on_stop: stop staging
  script:
    - yarn --frozen-lockfile
    # This allows passing the CI_ENVIRONMENT_URL for use in later stages.
    - yarn appsemble config set email bot@appsemble.com
    - yarn appsemble config set password "$(openssl rand -base64 12)"
    - yarn appsemble config set remote "$CI_ENVIRONMENT_URL"
    - node -r esm config/bin/deploy.js
  artifacts:
    expire_in: 1 day
    paths:
      - package.json

# Stop the staging environment.
stop staging:
  stage: deploy
  when: manual
  only:
    - master@appsemble/appsemble
  except:
    - schedules
  dependencies: []
  environment:
    name: review/master
    action: stop
  script:
    - yarn --frozen-lockfile
    - node -r esm config/bin/stop.js

###################################################################################################
#  Provision Stage                                                                                #
###################################################################################################

# Provision the live environment with the blocks that were built in the build stage.
upload blocks:
  stage: provision
  except:
    - schedules
  dependencies:
    - build blocks
    - pack
    - review
    - staging
  variables:
    GIT_STRATEGY: none
  script:
    - npm install ./packages/node-utils/*.tgz
    - npm install ./packages/cli/*.tgz
    - yarn appsemble login
    - yarn appsemble block register --ignore-conflict blocks/action-button
    - yarn appsemble block register --ignore-conflict blocks/detail-viewer
    - yarn appsemble block register --ignore-conflict blocks/list
    - yarn appsemble block register --ignore-conflict blocks/form
    - yarn appsemble block register --ignore-conflict blocks/map
    - yarn appsemble block register --ignore-conflict blocks/markdown
    - yarn appsemble block register --ignore-conflict blocks/splash
