image: node:12-slim

stages:
  - test
  - build
  - publish
  - deploy
  - provision
  - end 2 end

###################################################################################################
#  Job Templates                                                                                  #
###################################################################################################

# A preset for running Docker in Docker.
.docker:
  services:
    - docker:dind
  image: docker
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# A preconfigured environment for using Helm.
.helm:
  image:
    # This is the most official Helm image at the moment.
    # https://github.com/helm/helm/issues/5682#issuecomment-490084864
    name: lachlanevenson/k8s-helm:v3.1.0
    entrypoint: [/bin/sh, -c]
  dependencies: []

# A job preset for deleting Helm Charts.
.helm-delete:
  extends: .helm
  variables:
    GIT_STRATEGY: none
  script:
    - helm delete "$CI_ENVIRONMENT_SLUG"

# A preconfigured environment for using Yarn.
.yarn:
  dependencies: []
  before_script:
    - yarn --frozen-lockfile --ignore-scripts

###################################################################################################
#  Test Stage                                                                                     #
###################################################################################################

# Scan for dependency vulnerabilities.
dependency scanning:
  extends: .yarn
  allow_failure: true
  only:
    refs:
      - triggers
    changes:
      - yarn.lock
  script:
    - yarn gitlab-yarn-audit
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning.json

# Lint JavaScript code using ESLint.
eslint:
  extends: .yarn
  only:
    refs:
      - branches
      - merge_requests
    changes:
      - '**/*.{js,jsx,ts,tsx}'
      - yarn.lock
  script:
    - yarn eslint --format gitlab .
  artifacts:
    reports:
      codequality: gl-codequality.json

# Lint Helm charts.
helm lint:
  extends: .helm
  only:
    refs:
      - branches
      - merge_requests
    changes:
      - config/charts/**/*.*
  script:
    - helm lint config/charts/*

# Check formatting using prettier.
prettier:
  extends: .yarn
  only:
    refs:
      - branches
      - merge_requests
    changes:
      - '**/*.{html,json,md,scss,yaml,yml}'
      - yarn.lock
  script:
    - yarn prettier .

# Lint Markdown using remark.
remark lint:
  extends: .yarn
  only:
    refs:
      - branches
      - merge_requests
    changes:
      - '**/*.{dic,md}'
      - yarn.lock
  script:
    - yarn remark --frail .

# Lint CSS using stylelint.
stylelint:
  extends: .yarn
  only:
    refs:
      - branches
      - merge_requests
    changes:
      - '**/*.css'
      - yarn.lock
  script:
    # The --report-needless-disables flag is broken. Add this in package.json when it works again.
    # https://github.com/stylelint/stylelint/issues/4203
    - yarn stylelint .

# Test the code using unit tests.
test:
  services:
    - name: postgres:11
  only:
    - branches
    - merge_requests
    - tags
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - yarn --frozen-lockfile
    - yarn jest --coverage --reporters default --reporters jest-junit
  artifacts:
    reports:
      junit: junit.xml

# Check type validity for our TypeScript files.
tsc:
  extends: .yarn
  only:
    - branches
    - merge_requests
    - tags
  script:
    - yarn workspaces run tsc

###################################################################################################
#  Build Stage                                                                                    #
###################################################################################################

# Build the Docker image.
build docker image:
  extends: .docker
  stage: build
  needs: []
  only:
    - branches
    - merge_requests
    - schedules
    - tags
  except:
    - schedules
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

# Build the Docker image.
build docs image:
  extends: .docker
  stage: build
  needs: []
  only:
    - branches
    - merge_requests
    - tags
  except:
    - schedules
  script:
    - docker build .
      --build-arg "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"
      --file config/docs/Dockerfile
      --tag "$CI_REGISTRY_IMAGE/docs:$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE/docs:$CI_COMMIT_REF_NAME"

# Build the npm packages that should be published.
pack:
  extends: .yarn
  stage: build
  needs: []
  only:
    refs:
      - branches
      - merge_requests
      - tags
  script:
    - yarn workspace @appsemble/sdk pack
    - yarn workspace @appsemble/preact pack
    - yarn workspace @appsemble/node-utils pack
    - yarn workspace @appsemble/cli pack
    - mkdir build/
    - find packages -name '*.tgz' -exec mv {} ./build/ \;
  artifacts:
    name: '$CI_COMMIT_REF_NAME'
    expose_as: packages
    paths:
      - 'build/'

###################################################################################################
#  Publish Stage                                                                                  #
###################################################################################################

# Publish the Docker image that was built to Docker Hub.
publish docker:
  extends: .docker
  stage: publish
  needs:
    - build docker image
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "appsemble/appsemble:latest"
    - docker push "appsemble/appsemble:$CI_COMMIT_TAG"

publish npm:
  stage: publish
  dependencies:
    - pack
  needs:
    - pack
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  script:
    - npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
    - find . -exec npm publish --access public {} \;

###################################################################################################
#  Deploy Stage                                                                                   #
###################################################################################################

# Deploy the Docker image for a branch to a review environment.
review:
  extends: .helm
  stage: deploy
  when: manual
  needs:
    - build docker image
  only:
    - merge_requests
  allow_failure: false
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.appsemble.review
    on_stop: stop review
  script:
    # This is the only way to make sure the review environment can be overwritten
    - helm delete "$CI_ENVIRONMENT_SLUG" || true
    - helm repo add stable https://kubernetes-charts.storage.googleapis.com
    - helm dependency build config/charts/appsemble
    - helm install "$CI_ENVIRONMENT_SLUG" config/charts/appsemble
      --atomic
      --set "app=$CI_ENVIRONMENT_SLUG"
      --set "fullnameOverride=$CI_ENVIRONMENT_SLUG"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=${CI_ENVIRONMENT_URL/https:\/\//}"
      --set "ingress.tls.secretName=$CI_ENVIRONMENT_SLUG-tls"
      --set "migrateTo=next"
      --set "global.postgresql.existingSecret=postgresql-secret"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.organizations={appsemble}"
      --set "postgresql.fullnameOverride=$CI_ENVIRONMENT_SLUG-postgresql"
      --set "sentrySecret=sentry"
    - echo -n "$CI_ENVIRONMENT_URL" > environment-url.txt
  artifacts:
    expire_in: 30 days
    paths:
      - environment-url.txt

# Stop a review environment.
stop review:
  extends: .helm-delete
  stage: deploy
  when: manual
  only:
    - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop

# Deploy the Docker image for a branch to a review environment.
review docs:
  extends: .helm
  stage: deploy
  when: manual
  needs:
    - build docs image
  only:
    - merge_requests
  allow_failure: false
  environment:
    name: review/docs/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.appsemble.review
    on_stop: stop review docs
  script:
    - helm upgrade "$CI_ENVIRONMENT_SLUG" config/charts/appsemble-docs
      --atomic
      --install
      --set "git.commit.sha=$CI_COMMIT_SHA"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "url=$CI_ENVIRONMENT_URL"

# Stop a review environment.
stop review docs:
  extends: .helm-delete
  stage: deploy
  when: manual
  only:
    - merge_requests
  environment:
    name: review/docs/$CI_COMMIT_REF_SLUG
    action: stop

# Deploy the Docker image for master to the staging environment.
staging:
  extends: .helm
  stage: deploy
  needs:
    - build docker image
  only:
    - schedules
  environment:
    name: staging
    url: https://staging.appsemble.review
  script:
    # This is the only way to make sure staging can be overwritten
    - helm delete staging || true
    - helm repo add stable https://kubernetes-charts.storage.googleapis.com
    - helm dependency build config/charts/appsemble
    # First, install from the last stable tag.
    - helm install staging config/charts/appsemble
      --atomic
      --set "app=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.existingSecret=postgresql-secret"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=staging.appsemble.review"
      --set "ingress.tls.secretName=staging-tls"
      --set "postgresql.fullnameOverride=staging-postgresql"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.organizations={appsemble,amsterdam,10-second-move}"
      --set "sentrySecret=sentry"
    # Then upgrade to the current version
    - helm upgrade staging config/charts/appsemble
      --set "app=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.existingSecret=postgresql-secret"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=master"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=staging.appsemble.review"
      --set "ingress.tls.secretName=staging-tls"
      --set "migrateTo=next"
      --set "postgresql.fullnameOverride=staging-postgresql"
      --set "sentrySecret=sentry"

# Deploy the docs for the staging environment.
staging docs:
  extends: .helm
  stage: deploy
  needs:
    - build docs image
  only:
    - master@appsemble/appsemble
  except:
    - schedules
  allow_failure: false
  environment:
    name: staging docs
    url: https://staging.appsemble.dev
  script:
    - helm upgrade "$CI_ENVIRONMENT_SLUG" config/charts/appsemble-docs
      --atomic
      --install
      --set "git.commit.sha=$CI_COMMIT_SHA"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "url=$CI_ENVIRONMENT_URL"

production:
  extends: .helm
  stage: deploy
  needs:
    - publish docker
  only:
    - tags
  dependencies: []
  environment:
    name: production/appsemble
    url: https://appsemble.app
  script:
    - helm upgrade appsemble config/charts/appsemble
      --set "app=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.existingSecret=$POSTGRESQL_SECRET"
      --set "global.postgresql.postgresqlDatabase=$POSTGRESQL_DATABASE"
      --set "global.postgresql.postgresqlUsername=$POSTGRESQL_USERNAME"
      --set "global.postgresql.servicePort=$POSTGRESQL_PORT"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-prod"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=appsemble.app"
      --set "ingress.tls.secretName=$INGRESS_TLS_SECRET_NAME"
      --set "postgresql.fullnameOverride=$POSTGRESQL_HOST"
      --set "postgresql.enabled=false"
      --set 'postgresSSL=true'
      --wait

# Deploy the docs for production.
production docs:
  extends: .helm
  stage: deploy
  needs:
    - build docs image
  only:
    - tags
  allow_failure: false
  environment:
    name: production/docs
    url: https://appsemble.dev
  script:
    - helm upgrade docs config/charts/appsemble-docs
      --atomic
      --install
      --set "git.commit.sha=$CI_COMMIT_SHA"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-prod"
      --set "ingress.annotations.kubernetes\.io/ingress\.class=nginx"
      --set "url=$CI_ENVIRONMENT_URL"

###################################################################################################
#  Provision Stage                                                                                #
###################################################################################################

# Provision the review environment with the blocks that were built in the build stage.
provision review:
  extends: .yarn
  stage: provision
  only:
    - merge_requests
  dependencies:
    - review
  needs:
    - review
  environment:
    name: review/provision/$CI_COMMIT_REF_SLUG
  script:
    - yarn appsemble config set remote "$(cat environment-url.txt)"
    - yarn appsemble block publish blocks/*
    # XXX Uncomment this line when SSL wildcard certificates are implemented
    # https://gitlab.com/appsemble/infra/issues/1
    # - yarn appsemble app create --template --organization @appsemble apps/*

# Provision the staging environment with the blocks that were built in the build stage.
provision staging:
  extends: .yarn
  stage: provision
  only:
    - schedules
  needs:
    - staging
  environment:
    name: staging/provision
  script:
    - yarn appsemble config set remote https://staging.appsemble.review
    - yarn appsemble block publish blocks/*
    - yarn appsemble app create --organization appsemble --template apps/*

# Provision the production environment with the blocks that were built in the build stage.
provision production:
  extends: .yarn
  stage: provision
  only:
    - tags
  needs:
    - production
  environment:
    name: production provision
  script:
    - yarn appsemble config set remote https://appsemble.app
    - yarn appsemble config set ignore-conflict true
    - yarn appsemble block publish blocks/*

###################################################################################################
#  End to End Stage                                                                               #
###################################################################################################

lighthouse:
  stage: end 2 end
  dependencies: []
  needs:
    - provision staging
  only:
    - schedules
  script:
    - yarn --frozen-lockfile
  artifacts:
    expose_as: Lighthouse reports
    paths:
      - reports
    expire_in: 7 days
