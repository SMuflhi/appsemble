default:
  image: node:18-bullseye-slim

stages:
  - test
  - build
  - publish
  - deploy
  - provision
  - end 2 end

variables:
  JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
  JEST_JUNIT_CLASSNAME: '{classname}'
  JEST_JUNIT_SUITE_NAME: '{filepath}'
  JEST_JUNIT_TITLE: '{title}'

workflow:
  rules:
    # By default, run jobs for every merge request.
    - if: $CI_MERGE_REQUEST_ID
    # By default, run jobs for every commit on main.
    - if: $CI_COMMIT_BRANCH == 'main'
    # By default, run jobs for every schedule
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    # By default, run jobs for every tag
    - if: $CI_COMMIT_TAG

###################################################################################################
#  Job Templates                                                                                  #
###################################################################################################

# A preset for running Docker in Docker.
.docker:
  interruptible: true
  services:
    - docker:dind
  image: docker
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# A preconfigured environment for using Yarn.
.yarn:
  interruptible: true
  dependencies: []
  before_script:
    - yarn --frozen-lockfile --ignore-scripts

# A template for creating a minor or patch release
.release:
  extends: .yarn
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual
  allow_failure: true
  script:
    - apt-get update
    - apt-get install --yes git gnupg
    - gpg --import "$GPG_PRIVATE_KEY"
    - yarn scripts release "$INCREMENT"
    - VERSION="$(yarn --silent appsemble --version)"
    - |
      MESSAGE="$VERSION

      $(yarn --silent scripts get-release-notes)"
    - git config user.email bot@appsemble.com
    - git config user.name Appsemble
    - git add .
    - git commit --message "$MESSAGE" --cleanup whitespace --gpg-sign
    - git tag "$VERSION" --message "$MESSAGE" --cleanup whitespace --sign
    - git push "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/appsemble" HEAD:main --tags

###################################################################################################
#  Test Stage                                                                                     #
###################################################################################################

# Upload the coverage report to codecov
codecov:
  image: alpine
  allow_failure: true
  needs:
    - test node 18
  script:
    - wget https://uploader.codecov.io/latest/alpine/codecov
    - chmod +x codecov
    - ./codecov -R "$CI_PROJECT_DIR"

# Lint JavaScript code using ESLint.
eslint:
  extends: .yarn
  script:
    - yarn eslint --format gitlab .
  artifacts:
    reports:
      codequality: gl-codequality.json

# Lint Helm charts.
helm lint:
  image: dtzar/helm-kubectl:3
  script:
    - helm lint config/charts/*

# Verify app messages are in sync with the app definition.
i18n:
  extends: .yarn
  script:
    - yarn appsemble app extract-messages --verify nl apps/*

# Check formatting using prettier.
prettier:
  extends: .yarn
  script:
    - yarn prettier .

# Lint Markdown using remark.
remark lint:
  extends: .yarn
  script:
    - yarn remark --frail --no-stdout .

# Lint CSS using stylelint.
stylelint:
  extends: .yarn
  script:
    - yarn stylelint .

# Run unittests using NodeJS 14.
test node 14:
  interruptible: true
  image: node:14-bullseye-slim
  services:
    - postgres:14
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - yarn --frozen-lockfile
    - yarn jest
  artifacts:
    reports:
      junit: junit.xml

# Run unittests using NodeJS 16.
test node 16:
  interruptible: true
  image: node:16-bullseye-slim
  services:
    - postgres:14
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - yarn --frozen-lockfile
    - yarn jest
  artifacts:
    reports:
      junit: junit.xml

# Run unittests using NodeJS 18.
test node 18:
  interruptible: true
  services:
    - postgres:14
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - yarn --frozen-lockfile
    - yarn jest --coverage
  artifacts:
    paths:
      - coverage
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

# Check type validity for our TypeScript files.
tsc:
  extends: .yarn
  script:
    - yarn workspaces run tsc

# Check type validity for our TypeScript files.
validate:
  extends: .yarn
  script:
    - yarn scripts validate

###################################################################################################
#  Build Stage                                                                                    #
###################################################################################################

# Build the Docker image.
build docker image:
  extends: .docker
  stage: build
  needs: []
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" --build-arg "version=$CI_COMMIT_REF_NAME" --build-arg "date=$CI_JOB_STARTED_AT" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

# Build the npm packages that should be published.
pack:
  extends: .yarn
  stage: build
  needs: []
  script:
    - yarn workspace @appsemble/types pack
    - yarn workspace @appsemble/sdk pack
    - yarn workspace @appsemble/preact pack
    - yarn workspace @appsemble/utils pack
    - yarn workspace @appsemble/node-utils pack
    - yarn workspace @appsemble/webpack-config pack
    - yarn workspace @appsemble/cli pack
    - yarn workspace appsemble pack
    - yarn workspace create-appsemble pack
    - mkdir build/
    - find packages -name '*.tgz' -exec mv {} ./build/ \;
  artifacts:
    name: npm packages
    expose_as: packages
    paths:
      - build/

# Package the Helm chart
helm package:
  image: dtzar/helm-kubectl:3
  stage: build
  needs: []
  script:
    - cp LICENSE.md config/charts/appsemble/
    - config/bin/helm-package.sh --dependency-update --destination public config/charts/appsemble/
  artifacts:
    name: Helm chart
    expose_as: Helm chart
    paths:
      - public/

###################################################################################################
#  Publish Stage                                                                                  #
###################################################################################################

twitter:
  extends: .yarn
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - yarn scripts twitter

# Update metadata on Docker Hub
docker metadata:
  extends: .yarn
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - yarn scripts docker-metadata

# Create a GitHub release
github release:
  extends: .yarn
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - yarn scripts github-release

# Create a GitLab release
gitlab release:
  extends: .yarn
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - yarn scripts gitlab-release

# Publish the Docker image that was built to Docker Hub.
publish docker:
  extends: .docker
  stage: publish
  needs:
    - build docker image
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "appsemble/appsemble:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "appsemble/appsemble:latest"
    - docker push "appsemble/appsemble:$CI_COMMIT_TAG"

# Publish the Helm chart to https://charts.appsemble.com
publish helm:
  image: dtzar/helm-kubectl:3
  needs:
    - helm package
  stage: publish
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apk add git gnupg
    - gpg --import "$GPG_PRIVATE_KEY"
    - git init
    - git remote add origin "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/charts"
    - git fetch --depth 1
    - git checkout --track origin/main
    - git config commit.gpgSign true
    - git config user.email bot@appsemble.com
    - git config user.name Appsemble
    - git add public
    - git commit --message "Add Appsemble Helm chart $CI_COMMIT_TAG"
    - git push origin main
    - helm repo add appsemble https://charts.appsemble.com
    - | # Wait until the chart has been published downstream
      while ! helm show all 'appsemble/appsemble' --version "$CI_COMMIT_TAG" 2> /dev/null; do
        sleep 3
        echo retrying in 3 secondsâ€¦
        helm repo update > /dev/null
      done

# Publish npm packages to npmjs.org.
publish npm:
  stage: publish
  dependencies:
    - pack
  needs:
    - pack
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
    - find . -exec npm publish --access public {} \;

# Perform various post release actions.
sentry release:
  needs: []
  image:
    name: getsentry/sentry-cli:1
    entrypoint: [/bin/sh, -c]
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - sentry-cli releases new --finalize "$CI_COMMIT_TAG"
    - sentry-cli releases set-commits --auto "$CI_COMMIT_TAG"

# Create a patch release
release patch:
  extends: .release
  variables:
    INCREMENT: patch

# Create a minor release
release minor:
  extends: .release
  variables:
    INCREMENT: minor

###################################################################################################
#  Deploy Stage                                                                                   #
###################################################################################################

# Delete all succesful jobs for review environments nightly
cleanup k8s jobs:
  image: dtzar/helm-kubectl:3
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  environment:
    name: review/cleanup
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    - kubectl delete job $(kubectl get job -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')

# Deploy the Docker image for a branch to a review environment.
review:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - build docker image
    - job: helm package
      artifacts: true
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: https://$CI_MERGE_REQUEST_IID.appsemble.review
    on_stop: stop review
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    # This is the only way to make sure the review environment can be overwritten
    - helm delete "review-$CI_MERGE_REQUEST_IID" || true
    - kubectl delete pvc --selector "app.kubernetes.io/instance=review-$CI_MERGE_REQUEST_IID" || true
    - helm install "review-$CI_MERGE_REQUEST_IID" ./public/appsemble-*.tgz
      --atomic
      --set "fullnameOverride=review-$CI_MERGE_REQUEST_IID"
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$CI_COMMIT_REF_NAME"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=${CI_ENVIRONMENT_URL/https:\/\//}"
      --set "ingress.tls.secretName=review-$CI_MERGE_REQUEST_IID-tls"
      --set "ingress.tls.wildcardSecretName=review-$CI_MERGE_REQUEST_IID-tls-wildcard"
      --set "migrateTo=next"
      --set "global.postgresql.auth.existingSecret=postgresql-secret"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.password=$BOT_ACCOUNT_PASSWORD"
      --set "postgresql.fullnameOverride=review-$CI_MERGE_REQUEST_IID-postgresql"
      --set "proxy=true"
      --set "remote=https://appsemble.app"
      --set "sentry.allowedDomains={*.appsemble.review}"
      --set "sentry.environment=$CI_ENVIRONMENT_NAME"
      --set "sentry.secret=sentry"

# Stop a review environment.
stop review:
  image: dtzar/helm-kubectl:3
  dependencies: []
  stage: deploy
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
      when: manual
  allow_failure: true
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    - helm delete "review-$CI_MERGE_REQUEST_IID"
    - kubectl delete pvc --selector "app.kubernetes.io/instance=review-$CI_MERGE_REQUEST_IID"

# Deploy the Docker image for main to the staging environment.
staging:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - build docker image
    - job: helm package
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  environment:
    name: staging
    url: https://staging.appsemble.review
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace staging
    # This is the only way to make sure staging can be overwritten
    - helm delete staging || true
    - kubectl delete pvc --selector "app.kubernetes.io/instance=staging" || true
    - helm install staging ./public/appsemble-*.tgz
      --atomic
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.auth.existingSecret=postgresql-secret"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=main"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-dev"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=staging.appsemble.review"
      --set "ingress.tls.secretName=staging-tls"
      --set "ingress.tls.wildcardSecretName=staging-tls-wildcard"
      --set "migrateTo=next"
      --set "oauthSecret=oauth2"
      --set "postgresql.fullnameOverride=staging-postgresql"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.password=$BOT_ACCOUNT_PASSWORD"
      --set "proxy=true"
      --set "remote=https://appsemble.app"
      --set "sentry.allowedDomains={*.appsemble.review}"
      --set "sentry.environment=staging"
      --set "sentry.secret=sentry"

production:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - publish docker
    - publish helm
  rules:
    - if: $CI_COMMIT_TAG
  environment:
    name: production
    url: https://appsemble.app
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:production"
    - kubectl config set-context --current --namespace appsemble
    - helm repo add appsemble https://charts.appsemble.com
    - helm upgrade appsemble appsemble/appsemble
      --version "$CI_COMMIT_TAG"
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.auth.existingSecret=$POSTGRESQL_SECRET"
      --set "global.postgresql.auth.database=$POSTGRESQL_DATABASE"
      --set "global.postgresql.auth.username=$POSTGRESQL_USERNAME"
      --set "global.postgresql.service.ports.postgresql=$POSTGRESQL_PORT"
      --set "ingress.annotations.cert-manager\.io/cluster-issuer=letsencrypt-prod"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.enabled=true"
      --set "ingress.host=appsemble.app"
      --set "ingress.tls.secretName=appsemble-tls"
      --set "ingress.tls.wildcardSecretName=appsemble-tls-wildcard"
      --set "oauthSecret=oauth2"
      --set "postgresql.fullnameOverride=$POSTGRESQL_HOST"
      --set "postgresql.enabled=false"
      --set 'postgresSSL=true'
      --set "proxy=true"
      --set "sentry.allowedDomains={*.appsemble.app, appsemble.app}"
      --set "sentry.environment=production"
      --set "sentry.secret=sentry"
      --wait

###################################################################################################
#  Provision Stage                                                                                #
###################################################################################################

# Provision the review environment with the blocks that were built in the build stage.
provision review:
  extends: .yarn
  stage: provision
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
  needs:
    - review
  script:
    - yarn scripts release patch
    - yarn appsemble config set context review
    - yarn appsemble config set remote "https://$CI_MERGE_REQUEST_IID.appsemble.review"
    - yarn scripts wait-for-api
    - yarn appsemble organization create appsemble
      --description 'The open source low-code app building platform'
      --email support@appsemble.com
      --icon packages/server/assets/appsemble.png
      --name Appsemble
      --website https://appsemble.com
    - yarn create-appsemble block --organization appsemble --template vanilla --name template-vanilla
    - yarn create-appsemble block --organization appsemble --template preact --name template-preact
    - yarn create-appsemble block --organization appsemble --template mini-jsx --name template-mini-jsx
    - yarn appsemble -vv block publish blocks/*
    - yarn appsemble -vv app create apps/* --resources

# Provision the staging environment with the blocks that were built in the build stage.
provision staging:
  extends: .yarn
  stage: provision
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  needs:
    - staging
  script:
    - yarn scripts release patch
    - yarn appsemble config set context staging
    - yarn appsemble config set remote https://staging.appsemble.review
    - yarn appsemble organization create appsemble
      --description 'The open source low-code app building platform'
      --email support@appsemble.com
      --icon packages/server/assets/appsemble.png
      --name Appsemble
      --website https://appsemble.com
    - yarn appsemble -vv block publish blocks/*
    - yarn appsemble -vv app create apps/* --resources

# Provision the production environment with the blocks that were built in the build stage.
provision production:
  extends: .yarn
  stage: provision
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - production
  environment:
    name: production
    action: prepare
  script:
    - yarn appsemble config set context production
    - yarn appsemble config set remote https://appsemble.app
    - yarn appsemble config set ignore-conflict true
    - yarn appsemble -vv block publish blocks/*
    - yarn appsemble -vv app update --force apps/*

###################################################################################################
#  End to End Stage                                                                               #
###################################################################################################

# Test template apps using Lighthouse.
lighthouse:
  interruptible: true
  stage: end 2 end
  needs:
    - job: provision review
      optional: true
    - job: provision staging
      optional: true
    - job: provision production
      optional: true
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_TAG
  script:
    - yarn --frozen-lockfile
    - yarn install-chrome-dependencies
    - yarn scripts wait-for-ssl
    - yarn lhci collect
    - yarn lhci assert
  artifacts:
    expose_as: Lighthouse reports
    when: always
    paths:
      - .lighthouseci

cypress:
  stage: end 2 end
  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
  needs:
    - job: provision review
      optional: true
    - job: provision staging
      optional: true
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  script:
    - yarn --frozen-lockfile
    - yarn scripts wait-for-ssl
    - yarn workspace @appsemble/e2e run e2e
  artifacts:
    expose_as: Cypress videos and screenshots
    when: always
    paths:
      - packages/e2e/cypress/videos
      - packages/e2e/cypress/screenshots
      - packages/e2e/cypress/snapshots
    reports:
      junit: packages/e2e/junit.xml
